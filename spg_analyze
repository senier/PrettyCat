#!/usr/bin/env python3

import argparse
import sys
import inspect

# FIXME: The Z3 package is not found my Debian. Investigate.
sys.path.append ("/home/alex/.python_venv/lib/python2.7/site-packages/")

import spg.graph
import spg.primitives
from spg.guarantees import Conf, Intg
from spg.error import *
from spg.z3exp import Z3Text

import z3
from z3 import sat, is_true, And, simplify

class Analyze (spg.graph.Graph, z3.Solver):

    def __init__ (self, infile):

        spg.graph.Graph.__init__ (self, infile)
        z3.Solver.__init__ (self)
        self.set (unsat_core=True)
        self.assert_db = {}

        primitives = {}
        for name, obj in inspect.getmembers (sys.modules['spg.primitives']):
            if inspect.isclass (obj):
                primitives[name] = obj

        # Create primitive objects
        for node in self.graph.nodes():

            kind    = self.graph.node[node]['kind']
            objname = "Primitive_" + kind

            try:
                primitive = primitives[objname](self, node, self.graph.node[node])
            except AttributeError as e:
                raise PrimitiveInvalidAttributes (node, kind, str(e))

            self.graph.node[node]['primitive'] = primitive

    def print_unsat_core (self):

        unsat_core = []
        for p in self.unsat_core():
            unsat_core.append (simplify (self.assert_db[str(p)]))

        t = Z3Text (simplify (And (unsat_core)))
        err (t.str())

    def add_rule (self, rule, name):
        self.assert_and_track (rule, name)
        self.assert_db[name] = rule

    def analyze (self):

        # Put node rules into solver
        for n in self.graph.nodes():
            primitive = self.graph.node[n]['primitive']
            self.add_rule (primitive.rule(), "RULE>" + primitive.name)

        # Put edge (channel) rules into solver
        for (parent, child, data) in self.graph.edges (data=True):
            pog = self.graph.node[parent]['primitive'].output
            cig = self.graph.node[child]['primitive'].input
            darg = data['darg']
            sarg = data['sarg']
            channel = "CHNL>" + parent + "/" + sarg + " -> " + child + "/" + darg
            self.add_rule (Conf(pog[sarg]) == Conf(cig[darg]), channel + ">conf")
            self.add_rule (Intg(pog[sarg]) == Intg(cig[darg]), channel + ">intg")

        if self.check() != sat:
            return False

        # Update all guarantee values
        for n in self.graph.nodes():
            primitive = self.graph.node[n]['primitive']
            for (unused, g) in primitive.input:
                g.update (self.model())
            for (unused, g) in primitive.output:
                g.update (self.model())

        return True

def main(args):

    spg.error.verbose (args.verbose)

    # Read in graph
    G = Analyze (args.input[0])
    solved = G.analyze()

    if args.output:
        G.write (args.output[0])

    if not G.fail and not solved:
        err ("No solution")
        if args.unsat:
            G.print_unsat_core()
        sys.exit (1)

    if G.fail and solved:
        err ("Failure expected, but solution found");
        sys.exit (1)

    sys.exit(0)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='SPG Analyzer')
    parser.add_argument('--input', action='store', nargs=1, required=True, help='Input file', dest='input');
    parser.add_argument('--output', action='store', nargs=1, required=False, help='Output file', dest='output');
    parser.add_argument('--verbose', action='store_true', required=False, help='Verbose output', dest='verbose');
    parser.add_argument('--unsat', action='store_true', required=False, help='Print unsat core', dest='unsat');

    try:
        args = parser.parse_args ()
        main(args)
    except Exception as e:
        err (e)
        raise
