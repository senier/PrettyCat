#!/usr/bin/env python3

import time
import sys
import argparse
import subprocess
import os
import re
import pydot
import json

from libspg import warn, info, err
import libspg

from os.path import dirname

from spg.z3exp import Z3Latex, Z3Unsat, Z3Text
import spg.graph

sys.path.append ("/home/alex/.python_venv/lib/python2.7/site-packages/")
from z3 import *
import networkx as nx
from networkx.readwrite import json_graph

args = ()

def jdefault (o):
    return None

class Graph (spg.graph.Graph):

    def __init__ (self, infile):

        self.pd         = None
        self.subgraphs  = {}
        self._pmap      = {}
        self._pnum      = 0
        self._id        = 0
        self.tracelog   = []
        self.unsat      = None

        super().__init__ (infile)

    def graph (self):
        return self.graph

    def trace_partition (self, tag):

        G = self.graph

        pids   = set()
        intra  = 0
        inter  = 0
        g_none = set()
        g_conf = set()
        g_intg = set()
        g_both = set()

        for node in G.node:
            if G.node[node]['kind'] != 'env':

                if self.has_pid (node):
                    pids.add (self.get_pnum (node))
                else:
                    pids.add (node)

                c = G.node[node]['primitive'].guarantees['c']
                i = G.node[node]['primitive'].guarantees['i']
                if c and i:
                    g_both.add (node)
                elif c:
                    g_conf.add (node)
                elif i:
                    g_intg.add (node)
                else:
                    g_none.add (node)

        for (parent, child) in G.edges():

            if G.node[parent]['kind'] == 'env' or G.node[child]['kind'] == 'env':
                continue
            if self.has_pid (parent) and self.has_pid (child) and self.get_pnum (parent) == self.get_pnum (child):
                intra += 1
            else:
                inter += 1

        entry = {}
        entry['Type']                = tag
        entry['Nodes']               = len(G.node)
        entry['No. Partitions']      = len(pids)
        entry['Intra Partition IPC'] = intra
        entry['Inter Partition IPC'] = inter
        entry['No Guarantees']       = len(g_none)
        entry['Integrity']           = len(g_intg)
        entry['Confidentiality']     = len(g_conf)
        entry['Both']                = len(g_both)

        self.tracelog.append (entry)

    def trace_info (self):
        num = 1
        info ("Trace info:")
        print ("Entry, Type, No. Partitions, Intra Partition IPC, Inter Partition IPC, No. Nodes, No Guarantees, Integrity, Confidentiality, Both")
        for t in self.tracelog:
            print ("%d, %s, %d, %d, %d, %d, %d, %d, %d %d" % \
                (num, t['Type'], t['No. Partitions'], t['Intra Partition IPC'], t['Inter Partition IPC'], \
                 t['Nodes'], t['No Guarantees'], t['Integrity'], t['Confidentiality'], t['Both']))
            num += 1

    def check_assertions (self):

        edges = 0
        checked = 0
        success = True

        for (parent, child, data) in self.graph.edges (data=True):
            has_assertions = False
            edges += 1
            darg = data['darg']
            sarg = data['sarg']

            if data['assert_c'] != None:
                has_assertions = True
                val_c = self.graph.node[parent]['primitive'].output.guarantees()[sarg].val_c()
                if val_c != data['assert_c']:
                    err (parent + "/" + sarg + " => " + child + "/" + darg + ": confidentiality assertion failed: " + str(val_c) + ", expected: " + str(data['assert_c']))
                    success = False

            if data['assert_i'] != None:
                has_assertions = True
                val_i = self.graph.node[parent]['primitive'].output.guarantees()[sarg].val_i()
                if val_i != data['assert_i']:
                    err (parent + "/" + sarg + " => " + child + "/" + darg + ": integrity assertion failed: " + str(val_i) + ", expected: " + str(data['assert_i']))
                    success = False

            if has_assertions:
                checked += 1

        info ("Checked %d assertions for %d edges" % (checked, edges))
        return success

    def safe_unsat_core (self, unsat_core):

        u = Z3Unsat (simplify (And (unsat_core)))
        self.unsat = u.get_unsat()

        info ("Full, simplified unsat core:")
        t = Z3Text (And (unsat_core))
        info (t.str ())

    def dump_rules (self, dumpfile):

        # Dump all rules if requested
        if dumpfile:
            with open (dumpfile, 'w') as f:
                f.write ("\\documentclass[a4paper]{article}\n")
                f.write ("\\usepackage{amssymb}\n")
                f.write ("\\usepackage{fdsymbol}\n")
                f.write ("\\usepackage{float}\n")
                f.write ("\\newcommand{\intg}[1]{{#1}_{\mathcal{I}}}\n")
                f.write ("\\newcommand{\conf}[1]{{#1}_{\mathcal{C}}}\n")
                f.write ("\\newcommand{\invar}[1]{\mathit{#1}}\n")
                f.write ("\\newcommand{\outvar}[1]{\overrightharpoon{#1}}\n")
                f.write ("\\begin{document}\n")
                for a in self.solver.solver.assertions():
                    f.write ("\\begin{figure}[H]\n")
                    f.write ("\\begin{align*}\n")
                    e = Z3Latex (a.arg(1))
                    f.write ("R &= " + e.str() + " \n")
                    f.write ("\\end{align*}\n")
                    caption = str(a.arg(0))
                    caption = re.sub ('ASSERT>RULE>', 'Rule: ', caption)
                    caption = re.sub ('ASSERT>CHNL>', 'Channel: ', caption)
                    caption = re.sub ('_', '\_', caption)
                    caption = re.sub ('\^', '\^ ', caption)
                    caption = re.sub ('>', '\>', caption)
                    caption = re.sub ('->', '$\\\\rightarrow{}$', caption)
                    f.write ("\\caption{" + caption + "}\n")
                    f.write ("\\end{figure}\n")
                f.write ("\\end{document}")

    def analyze (self):

        self.solver = SPG_Solver()
        assertno = 0

        # Put node rules into solver
        for n in self.graph.nodes():
            self.graph.node[n]['primitive'].populate (self.solver)

        # Put edge (channel) rules into solver
        for (parent, child, data) in self.graph.edges(data=True):
            pog = self.graph.node[parent]['primitive'].output.guarantees()
            cig = self.graph.node[child]['primitive'].input.guarantees()
            darg = data['darg']
            sarg = data['sarg']
            channel = "CHNL>" + parent + "/" + sarg + " -> " + child + "/" + darg
            self.solver.assert_and_track (Conf(pog[sarg]) == Conf(cig[darg]), channel + ">conf")
            self.solver.assert_and_track (Intg(pog[sarg]) == Intg(cig[darg]), channel + ">intg")
            #solver.assert_and_track (Implies (Conf(pog[sarg]), Conf(cig[darg])), channel + ">conf")
            #solver.assert_and_track (Implies (Intg(cig[darg]), Intg(pog[sarg])), channel + ">intg")

        if self.solver.check() == sat:

            # Check assertions
            result = self.check_assertions()
            if result:
                info ("Assertions checked")
            else:
                warn ("Assertions failed")

            if self.fail:
                err ("Failure expected, but solution found");
                return False

            info ("Solution found")

            return result

        else:
            self.safe_unsat_core(self.solver.unsat_core())

            # We expect a failure - exit without error
            if self.fail:
                return True

            err ("No solution")
            return False

    def has_pid (self, node):
        return 'partition' in self.graph.node[node]

    def set_pid (self, node, pid):
        if self.has_pid (node):
            raise Exception ("Overwriting partition")
        self.graph.node[node]['partition'] = pid
        new_pnum        = self._pnum if pid in self._pmap else self._pnum + 1
        self._pmap[pid] = self._pnum
        self._pnum      = new_pnum

    def get_pid (self, node):
        pid = self.graph.node[node]['partition']
        return pid

    def set_pnum (self, node, pnum):
        pid = self.graph.node[node]['partition']
        self._pmap[pid] = pnum

    def get_pnum (self, node):
        pid = self.graph.node[node]['partition']
        return self._pmap[pid]

    def new_id (self):
        self._id += 1
        return self._id

    def partition_exact (self, node, new_pid):

        G = self.graph
    
        # Partition already set
        if self.has_pid (node):
            return
        
        # Always put env primitive into a new partition
        if G.node[node]['kind'] == 'env':
            self.set_pid (node, self.new_id())
            return

        self.set_pid (node, new_pid)
    
        # Partition towards parents
        for (parent, child) in G.in_edges (nbunch=node):
    
            if G.node[parent]['primitive'].guarantees['c'] == G.node[child]['primitive'].guarantees['c'] and \
               G.node[parent]['primitive'].guarantees['i'] == G.node[child]['primitive'].guarantees['i']:
                self.partition_exact (parent, new_pid)
    
        # Partition towards children
        for (parent, child) in G.out_edges (nbunch=node):
    
            if G.node[parent]['primitive'].guarantees['c'] == G.node[child]['primitive'].guarantees['c'] and \
               G.node[parent]['primitive'].guarantees['i'] == G.node[child]['primitive'].guarantees['i']:
                self.partition_exact (child, new_pid)

    def guarantees_lt (self, src, dst):
        G = self.graph
        return G.node[src]['primitive'].guarantees['c'] <= G.node[dst]['primitive'].guarantees['c'] and \
               G.node[src]['primitive'].guarantees['i'] <= G.node[dst]['primitive'].guarantees['i']

    def merge_const (self):

        G = self.graph

        for src in G.node:
            if G.node[src]['kind'] == 'const':
                dst = list(G.edge[src])[0]
                if self.guarantees_lt (src, dst):
                    dstnum = self.get_pnum(dst)
                    srcnum = self.get_pnum(src)
                    if dstnum != srcnum:
                        self.set_pnum (src, dstnum)

    def merge_branch (self):

        G = self.graph

        for const in G.node:

            if G.node[const]['kind'] != 'const': continue

            branch   = list(G.edge[const])[0]
            in_edges = len(G.in_edges(nbunch=branch))

            # We assume a branch is an xform with only one
            # input. This may be wrong, though.
            if G.node[branch]['kind'] == 'xform' and in_edges == 1:

                constnum  = self.get_pnum(const)
                branchnum = self.get_pnum(branch)

                # Const/branch not in the same partition
                if constnum != branchnum: continue

                compatible = True
                targetnum  = None
                for (b, target, data) in G.out_edges(nbunch=branch, data=True):
                    if targetnum:
                        compatible = compatible and targetnum == self.get_pnum(target)
                    else:
                        targetnum = self.get_pnum(target)
                    compatible = compatible and self.guarantees_lt (branch, target)

                # Only join different partitions with compatible guarantees
                if branchnum != targetnum and compatible:
                    for (b, target, data) in G.out_edges(nbunch=branch, data=True):
                        self.set_pnum (branch, self.get_pnum (target))

    def partition (self, partition, merge_const, merge_branch, concentrate):

        G = self.graph

        if not partition:
            info ("Partitioning disabled")
            return

        self.trace_partition ("Merge none")

        for node in G.node:
            self.partition_exact (node, self.new_id())
        self.trace_partition ("Merge Basic")

        # Partition graph exactly by guarantees
        if merge_const:
            # Merge constants into compatible domains
            self.merge_const()
            self.trace_partition ("Merge Const")
            if merge_branch:
                self.merge_branch()
                self.trace_partition ("Merge Branch")

        for node in G.node:
            part  = "<sub>(" + str(self.get_pnum (node)) + ")</sub>" if partition else ""
            label = "<<b>" + G.node[node]['kind'] + ": </b>" + node + "<font point-size=\"6\">" + part + "</font>>"
            G.node[node]['label'] = label

        prefix = "cluster_" if partition else "partition_"
        for node in nx.drawing.nx_pydot.to_pydot(G).get_nodes():

            name = node.get_name()
            new_node = pydot.Node(name)
            attributes = node.get_attributes()
            for a in attributes:
                new_node.set (a, attributes[a])

            # to_pydot() quotes node names with spaces in it, but doesn't quote others
            if name[0] == "\"" and name[-1] == "\"":
                name = name[1:-1]

            pid = self.get_pid (name)

            if not pid in self.subgraphs:
                self.subgraphs[pid] = \
                    pydot.Subgraph (graph_name = prefix + str(self.get_pnum(name)), \
                                    label      = "partition " + str(self.get_pnum(name)), \
                                    penwidth   = 2,
                                    bgcolor    = "gray80")

            self.subgraphs[pid].add_node (new_node)

        # Create graph
        graph = pydot.Dot()
        graph.set_type ("digraph")

        # Add partition subgraphs
        for s in self.subgraphs:
            graph.add_subgraph (self.subgraphs[s])

        for (parent, child, data) in self.graph.edges(data=True):
            pclust = self.get_pnum(parent)
            cclust = self.get_pnum(child)
            if pclust != cclust:
                data['ltail'] = "cluster_" + str(pclust)
                data['lhead'] = "cluster_" + str(cclust)

        for edge in nx.drawing.nx_pydot.to_pydot(G).get_edges():
            src = edge.get_source()
            dst = edge.get_destination()

            new_edge = pydot.Edge (src = src, dst = dst)
            attributes = edge.get_attributes()
            for a in attributes:
                new_edge.set (a, attributes[a])

            if 'ltail' in attributes and 'lhead' in attributes and concentrate:
                cluster_edge = pydot.Edge (src = attributes['ltail'], dst = attributes['lhead'])
                graph.add_edge (cluster_edge)
            else:
                graph.add_edge (new_edge)

        self.pd = graph

    def write (self, out):

        pd = self.pd

        if out.endswith(".svg"):
            pd.write (out, prog = 'fdp', format = 'svg')
        elif out.endswith(".dot"):
            pd.write (out, prog = 'dot', format = 'dot')
        elif out.endswith(".graph"):
            with open (out, 'w') as outfile:
                for (node, data) in sorted (self.graph.nodes (data=True)):
                    for outarg in sorted (self.graph.node[node]['primitive'].output.guarantees()):
                        c = self.graph.node[node]['primitive'].output.guarantees()[outarg].val_c()
                        i = self.graph.node[node]['primitive'].output.guarantees()[outarg].val_i()
                        outfile.write (node + ": OUTPUT " + outarg + " i=" + str(i) + " c=" + str(c) + "\n")
                    for inarg in sorted (self.graph.node[node]['primitive'].input.guarantees()):
                        c = self.graph.node[node]['primitive'].input.guarantees()[inarg].val_c()
                        i = self.graph.node[node]['primitive'].input.guarantees()[inarg].val_i()
                        outfile.write (node + ": INPUT " + outarg + " i=" + str(i) + " c=" + str(c) + "\n")

        elif out.endswith(".json"):
            with open (out, 'w') as outfile:
                nld = json_graph.node_link_data (self.graph)

                # Cleanup unneeded elements
                del nld['graph']
                del nld['directed']
                del nld['multigraph']

                for l in nld['links']:
                    del l['tooltip']
                    del l['headlabel']
                    del l['taillabel']
                    del l['labelfontname']
                    del l['penwidth']
                    l['type'] = 'Directed'
                    l['source'] = nld['nodes'][l['source']]['id']
                    l['target'] = nld['nodes'][l['target']]['id']

                for n in nld['nodes']:
                    del n['tooltip']
                    del n['width']
                    del n['height']
                    del n['penwidth']

                    n['label'] = n['id']
                    n['shape'] = 'box'

                # Rename edges to links
                nld['edges'] = nld.pop('links')

                json.dump (nld, outfile, default = jdefault)
        else:
            raise Exception ("Unsupported graphviz output type")

    def statistics (self):

        G = self.graph
        out_i = 0
        out_c = 0
        in_i = 0
        in_c = 0

        for (parent, child, data) in self.graph.edges (data=True):

            sarg = data['sarg']
            if self.graph.node[parent]['primitive'].output.guarantees()[sarg].val_c():
                out_c = out_c + 1

            if self.graph.node[parent]['primitive'].output.guarantees()[sarg].val_i():
                out_i = out_i + 1

            darg = data['darg']
            if self.graph.node[child]['primitive'].input.guarantees()[darg].val_c():
                in_c = in_c + 1

            if self.graph.node[child]['primitive'].input.guarantees()[darg].val_i():
                in_i = in_i + 1

        info ("in_c: " + str(in_c) + " in_i: " + str(in_i) + " out_c: " + str(out_c) + " out_i: " + str(out_i))

        if args.partition:
            partitions = {}
            for (parent, child, data) in G.edges(data=True):
                spart = self.get_pnum(parent)
                dpart = self.get_pnum(child)
                if spart != dpart and G.node[parent]['kind'] != 'env' and G.node[child]['kind'] != 'env':
                    if not spart in partitions:
                        partitions[spart] = {}
                    if not dpart in partitions[spart]:
                        partitions[spart][dpart] = []
                    partitions[spart][dpart].append ((parent, data['sarg'], child, data['darg']))

            for spart in partitions:
                for dpart in partitions[spart]:
                    print ("%2.2d -> %2.2d:" % (spart, dpart))
                    for (parent, sport, child, dport) in partitions[spart][dpart]:
                        print ("   %s/%s -> %s/%s" % (parent, sport, child, dport))

    def run (self):

        G = self.graph

        # import global library
        libspg   = __import__ ("libspg")
        liblocal = __import__ (self.code)

        for node in G.node:

            kind = G.node[node]['kind']
            lib  = libspg
            name = kind

            if kind == "env" or kind == "xform":
                classname = G.node[node]['classname']
                if classname != None:
                    name = kind + "_" + G.node[node]['classname']

            try:
                libclass = getattr (libspg, name)
            except AttributeError:
                try:
                    libclass = getattr (liblocal, name)
                except AttributeError:
                    raise PrimitiveNotImplemented (name)

            classobj = libclass (node, G.node[node]['primitive'].config, G.node[node]['primitive'].attributes)
            G.node[node]['class'] = classobj
            G.node[node]['classname'] = name

        for node in G.node:

            # Insert send methods into class object
            sendmethods = {}
            for (parent, child, data) in G.out_edges (nbunch=node, data=True):
                try:
                    recvmethod = getattr (G.node[child]['class'], "recv_" + data['darg'])
                except AttributeError:
                    warn ("Implementation of '" + child + "' does not have receive method for parameter '" + data['darg'] + "'")
                    raise
                sendmethods[data['sarg']] = recvmethod

            G.node[node]['class'].set_sendmethods (sendmethods)

        for node in G.node:
            G.node[node]['class'].setDaemon (True)
            G.node[node]['class'].start ()

        # join all threads
        for node in G.node:
            G.node[node]['class'].join ()

    def get_partitions (self):

        partitions = {}
        for (parent, child, data) in self.graph.edges(data=True):

            sp = self.get_pnum (parent)
            dp = self.get_pnum (child)

            if not sp in partitions:
                partitions[sp] = {}

            if not dp in partitions[sp]:
                partitions[sp][dp] = {}

            if not (parent, child) in partitions[sp][dp]:
                partitions[sp][dp][(parent, child)] = 1
            else:
                partitions[sp][dp][(parent, child)] += 1

        return partitions

    def dump_code (self, filename):

        # Log which code is used by which primitives (per partition)
        code = {}
        for p in sorted(self.get_partitions()):
            if not p in code:
                code[p] = {}
            for node in G.node:
                if self.get_pnum (node) == p:
                    cn = G.node[node]['classname']
                    if not cn in code[p]:
                        code[p][cn] = []
                    code[p][cn].append (node)

        with open (filename, "w") as f:
            for p in code:
                f.write (str(p) + "\n")
                for cn in code[p]:
                    f.write ("   " + cn + ": " + str(len(code[p][cn])) + " - " + str (code[p][cn]) + "\n")

    def dump_partitions (self, filename):

        guarantees = {}
        partitions = self.get_partitions()

        for node in self.graph.nodes():
            p = self.get_pnum (node)
            if not p in guarantees:
                guarantees[p] = {}
                guarantees[p]['count'] = 1
                guarantees[p]['label'] = ""
            else:
                guarantees[p]['count'] += 1

            # Store node kind for first node in partition. For 'env' primtives
            # That have an own partition, we can change the shape such that
            # we recognize them visually.
            if guarantees[p]['count'] == 1:
                guarantees[p]['kind'] = self.graph.node[node]['kind']

            if not 'c' in guarantees[p]:
                guarantees[p]['c'] = False
            if self.graph.node[node]['primitive'].guarantees['c']:
                guarantees[p]['c'] = True
            if not 'i' in guarantees[p]:
                guarantees[p]['i'] = False
            if self.graph.node[node]['primitive'].guarantees['i']:
                guarantees[p]['i'] = True

            guarantees[p]['label'] += node + "\n"

        pg = nx.MultiDiGraph()
        for p in guarantees:

            name  = "Partition " + str(p)
            count = guarantees[p]['count']

            if guarantees[p]['kind'] == 'env':
                label = name + "\n\n"
                shape = 'invhouse'
            else:
                label = name + " (" + str(count) + ")\n\n"
                shape =  'rectangle'

            label += guarantees[p]['label']
            pg.add_node (name,
                         label=label, \
                         width=math.sqrt(count), \
                         height=math.sqrt(count), \
                         penwidth=5, \
                         shape=shape)
            set_style (pg.node[name], guarantees[p]['c'], guarantees[p]['i'])

        for sp in partitions:
            for dp in partitions[sp]:
                pg.add_edge ("Partition " + str(sp), "Partition " + str(dp), penwidth=2, xlabel=str(len(partitions[sp][dp])), labeljust='r')

        dot = nx.drawing.nx_pydot.to_pydot(pg)
        dot.set ("rankdir", "LR")
        dot.set ("sep", "+50,20")
        dot.set ("esep", "+10,4")
        dot.set ("splines", "ortho")
        dot.write (filename, prog = 'dot', format = 'svg')

    def merge_all (self):

        G = self.graph

        for node in G.nodes():
            G.node[node]['partition'] = 0
            self.set_pnum (node, 0)

        self.trace_partition ("Merge all")

class SPG_Solver_Base:

    def __init__ (self):
        raise Exception ("Abstract")

    def check (self):
        return self.solver.check()

    def model (self):
        return self.solver.model()

class SPG_Solver (SPG_Solver_Base):

    def __init__ (self):
        self.solver = Solver()
        self.assert_db = {}
        self.solver.set(unsat_core=True)
        self.unsat = None

    def unsat_core (self):
        unsat_core = []
        for p in self.solver.unsat_core():
            unsat_core.append (simplify (self.assert_db[str(p)]))
        return unsat_core

    def assert_and_track (self, condition, name):

        if (condition == None):
            return

        key = "ASSERT>" + str(name)
        if key in self.assert_db:
            raise InconsistentRule (name, "Already present")
        self.assert_db[key] = condition
        self.solver.assert_and_track (condition, key)

####################################################################################################

def dump_primitive_rules (filename):

    rules = []
    for primitive_class in Primitive.__subclasses__():
        name = primitive_class.__name__[10:]
        if not name in ['env', 'xform', 'const']:
            p = primitive_class (None, name, { 'guarantees': None, 'config': None, 'inputs': None, 'outputs': None, 'arguments': None})
            n = name.replace ("_", '')
            e = Z3Latex (And (p.rule))
            rules.append ("\\newcommand{\\" + n + "rule}{" + e.str(label = False) + "}" + "\n")
            rules.append ("\\newcommand{\\" + n + "rulenolabel}{" + e.str() + "}" + "\n")

    with open (filename, 'w') as outfile:
        for r in sorted(rules): outfile.write (r)

def main():

    # Add directory containing our model to search path so we can find the
    # local library there
    sys.path.append (dirname(args.input[0]))

    # Read in graph
    G = Graph (args.input[0])

    if args.initial:
        G.label()
        G.write ("initial_" + args.output[0])
      
    solved = G.analyze()

    if args.dump_latex:
        dump_primitive_rules(args.dump_latex[0])

    if args.dumpfile:
        G.dump_rules (args.dumpfile[0])

    libspg.exitval = 0
    if solved:
        G.partition (args.partition, args.merge_const, args.merge_branch, args.concentrate)
        if args.run:
            G.run()
        if args.partition and args.pgraph:
            G.dump_partitions(args.pgraph[0])
            G.dump_code(args.code[0])
        G.statistics()

    G.write (args.output[0])

    # This is just for comparison of graph statics
    if args.verbose:
        G.merge_all()
        G.trace_info()

    sys.exit (libspg.exitval if solved else 1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='SPG Analyzer')
    parser.add_argument('--input', action='store', nargs=1, required=True, help='Input file', dest='input');
    parser.add_argument('--latex', action='store', nargs=1, required=False, help='Store rules as latex file', dest='dump_latex');
    parser.add_argument('--test', action='store_true', help='Run in test mode', dest='test');
    parser.add_argument('--initial', action='store_true', help='Write graph prior to analysis', dest='initial');
    parser.add_argument('--output', action='store', nargs=1, required=True, help='Output file', dest='output');
    parser.add_argument('--run', action='store_true', required=False, help='Run model', dest='run');
    parser.add_argument('--verbose', action='store_true', required=False, help='Verbose output', dest='verbose');
    pgroup = parser.add_argument_group ("partition")
    pgroup.add_argument('--partition', action='store_true', help='Partition graph output', dest='partition');
    pgroup.add_argument('--merge_const', action='store_true', help='Merge constants into compatible partitions', dest='merge_const');
    pgroup.add_argument('--merge_branch', action='store_true', help='Marge branched constants into compatible domains', dest='merge_branch');
    pgroup.add_argument('--concentrate', action='store_true', help='Try to concentrate inter-cluster edges', dest='concentrate');
    pgroup.add_argument('--pgraph', action='store', nargs=1, required=False, help='Dump partition graph to file', dest='pgraph');
    pgroup.add_argument('--code', action='store', nargs=1, required=False, help='Dump code used by partitions to file', dest='code');

    parser.add_argument('--dump', action='store', nargs=1, help='Dump rules to file', dest='dumpfile');

    try:
        args = parser.parse_args ()
        if args.test or args.run and not args.verbose:
            libspg.quiet = 1
        main()
    except PrimitiveMissing as e:
        warn (e)
    except (PrimitiveInvalidAttributes, InconsistentRule, PrimitiveNotImplemented) as e:
        err (e)
        sys.exit (1)
