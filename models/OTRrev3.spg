<?xml version="1.0"?>
<spg>

    <!--
      ** Environment
      -->
    <env id="Network" confidentiality="False" integrity="False">
        <description>
            Network environement without confidentiality or integrity guarantees.
        </description>
        <flow sarg="dhcm" sink="D-H Commit (R)" darg="dhcm"/>
        <flow sarg="dhkm" sink="D-H Key (R)" darg="dhkm"/>
        <flow sarg="rvsm" sink="Reveal Signature (R)" darg="rvsm"/>
        <flow sarg="sigm" sink="Signature (R)" darg="sigm"/>
        <flow sarg="data" sink="Data (R)" darg="data"/>
        <arg name="dhkm"/>
        <arg name="dhcm"/>
        <arg name="rvsm"/>
        <arg name="sigm"/>
        <arg name="data"/>
    </env>

    <env id="User" confidentiality="True" integrity="True">
        <description>
            User environment guaranteeing confidentiality and integrity.
        </description>
        <flow sarg="data" sink="Encrypt (M)" darg="plaintext"/>
        <arg name="data"/>
    </env>

    <!--
      ** AKE
      -->

    <!-- Long term keys -->
    <const id="pub">
        <description>
            Public key
        </description>
        <flow sarg="const" sink="Concat M_A (S)" darg="pub"/>
        <flow sarg="const" sink="Concat X_A" darg="pub"/>
        <flow sarg="const" sink="Sign M_A" darg="pkey"/>
        <flow sarg="const" sink="Concat M_B (S)" darg="pub"/>
        <flow sarg="const" sink="Concat X_B" darg="pub"/>
        <flow sarg="const" sink="Sign M_B" darg="pkey"/>
    </const>

    <const id="priv">
        <description>
            Private key
        </description>
        <flow sarg="const" sink="Sign M_A" darg="skey"/>
        <flow sarg="const" sink="Sign M_B" darg="skey"/>
    </const>

    <const id="keyid">
        <description>
            Select keyid, a serial number for the D-H key computed earlier.
            It is an INT, and must be greater than 0.
        </description>
        <flow sarg="const" sink="Concat M_A (S)" darg="keyid"/>
        <flow sarg="const" sink="Concat X_A" darg="keyid"/>
        <flow sarg="const" sink="Concat M_B (S)" darg="keyid"/>
        <flow sarg="const" sink="Concat X_B" darg="keyid"/>
    </const>

    <!-- AKE -->
    <const id="State encrypted">
        <description>
            Constant signaling successful key exchange.
        </description>
        <flow sarg="const" sink="Guard Encrypted X_A" darg="data"/>
        <flow sarg="const" sink="Guard Encrypted X_B" darg="data"/>
    </const>

    <xform id="AKE State">
        <description>
            Current state of the AKE
        </description>
        <flow sarg="encrypted" sink="Guard Signature (S)" darg="cond"/>
        <arg name="state"/>
    </xform>

    <!--
      ** Key derivation
      -->

    <xform id="Derive keys">
        <description>
            Serialize the value of shared secret s as a minimum-length MPI secbytes.
        </description>
        <flow sarg="secbyte" sink="Concat ssid" darg="secbytes"/>
        <flow sarg="secbyte" sink="Concat c" darg="secbytes"/>
        <flow sarg="secbyte" sink="Concat m1" darg="secbytes"/>
        <flow sarg="secbyte" sink="Concat m2" darg="secbytes"/>
        <flow sarg="secbyte" sink="Concat m1'" darg="secbytes"/>
        <flow sarg="secbyte" sink="Concat m2'" darg="secbytes"/>
        <arg name="Responder ssec"/>
        <arg name="Initiator ssec"/>
    </xform>

    <const id="Prefix ssid">
        <description>
            Prefix b to calculate ssid, value 0x00
        </description>
        <flow sarg="const" sink="Concat ssid" darg="b"/>
    </const>

    <xform id="Concat ssid">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash ssid" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash ssid">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <flow sarg="hash" sink="Trim ssid" darg="ssid"/>
    </hash>

    <xform id="Trim ssid">
        <description>
            Let ssid be the first 64 bits of h2(0x00).
        </description>
        <flow sarg="ssid" sink="User" darg="ssid"/>
        <arg name="ssid"/>
    </xform>

    <const id="Prefix c">
        <description>
            Prefix b to calculate c and c', value 0x01
        </description>
        <flow sarg="const" sink="Concat c" darg="b"/>
    </const>

    <xform id="Concat c">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash c" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash c">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <flow sarg="hash" sink="Split c" darg="c"/>
    </hash>

    <xform id="Split c">
        <description>
            Let c be the first 128 bits of h2(0x01),
            and let c' be the second 128 bits of h2(0x01).
        </description>
        <flow sarg="c"  sink="Encrypt X_B" darg="key"/>
        <flow sarg="c"  sink="Decrypt X_B" darg="key"/>
        <flow sarg="c'" sink="Encrypt X_A" darg="key"/>
        <flow sarg="c'" sink="Decrypt X_A" darg="key"/>
        <arg name="c"/>
    </xform>

    <const id="Prefix m1">
        <description>
            Prefix b to calculate m1, value 0x02
        </description>
        <flow sarg="const" sink="Concat m1" darg="b"/>
    </const>

    <xform id="Concat m1">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash m1" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash m1">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <flow sarg="hash" sink="HMAC M_B (S)" darg="key"/>
        <flow sarg="hash" sink="HMAC M_B (R)" darg="key"/>
    </hash>

    <const id="Prefix m2">
        <description>
            Prefix b to calculate m2, value 0x03
        </description>
        <flow sarg="const" sink="Concat m2" darg="b"/>
    </const>

    <xform id="Concat m2">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash m2" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash m2">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <flow sarg="hash" sink="MAC Encrypted X_B" darg="key"/>
        <flow sarg="hash" sink="Verify Encrypted X_B" darg="key"/>
    </hash>

    <const id="Prefix m1'">
        <description>
            Prefix b to calculate m1', value 0x04
        </description>
        <flow sarg="const" sink="Concat m1'" darg="b"/>
    </const>

    <xform id="Concat m1'">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash m1'" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash m1'">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <flow sarg="hash" sink="HMAC M_A (R)" darg="key"/>
        <flow sarg="hash" sink="HMAC M_A (S)" darg="key"/>
    </hash>

    <const id="Prefix m2'">
        <description>
            Prefix b to calculate m2', value 0x05
        </description>
        <flow sarg="const" sink="Concat m2'" darg="b"/>
    </const>

    <xform id="Concat m2'">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash m2'" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash m2'">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <flow sarg="hash" sink="Verify Encrypted X_A" darg="key"/>
        <flow sarg="hash" sink="MAC Encrypted X_A" darg="key"/>
    </hash>

    <!--
      ** Send D-H Commit message
      -->
    <xform id="D-H Commit (S)">
        <description>
            Primitive assembling the first message of the AKE,
            the D-H Commit Message.
        </description>
        <flow sarg="dhcm" sink="Network" darg="dhcm"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="encrypted_g^x"/>
        <arg name="hashed_g^x"/>
    </xform>

    <const id="DHCM Protocol Version (S)">
        <description>
            The version number of the OTR protocol for outgoing D-H Commit messages.
        </description>
        <flow sarg="const" sink="D-H Commit (S)" darg="protocol_version"/>
    </const>

    <const id="DHCM Message Type (S)">
        <description>
            The message type of the outgoing D-H Commit messages.
        </description>
        <flow sarg="const" sink="D-H Commit (S)" darg="message_type"/>
    </const>

    <const id="DHCM Sender Instance Tag (S)">
        <description>
            The instance tag of the person sending this message.
        </description>
        <flow sarg="const" sink="D-H Commit (S)" darg="sender_instance_tag"/>
    </const>

    <const id="DHCM Receiver Instance Tag (S)">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <flow sarg="const" sink="D-H Commit (S)" darg="receiver_instance_tag"/>
    </const>

    <const id="Counter for g^x (S)">
        <description>
            Counter for encrypting g^x. As the x is random, this is
            always zero.
        </description>
        <flow sarg="const" sink="Encrypt g^x (S)" darg="ctr"/>
    </const>

    <encrypt id="Encrypt g^x (S)">
        <description>
            Implement a commitment scheme by encrypting the intiators public
            Diffie-Hellman value g^x with a random key r.
        </description>
        <flow sarg="ciphertext" sink="D-H Commit (S)" darg="encrypted_g^x"/>
    </encrypt>

    <const id="Length of x (S)">
        <description>
            Length of the Diffie-Hellman exponent x.
            At least 320 bits for OTR v3.
        </description>
        <flow sarg="const" sink="Random x (S)" darg="len"/>
    </const>

    <rng id="Random x (S)">
        <description>
            Random value x used to calcutate Diffie-Hellman public value
            g^x for the initiator.
        </description>
        <flow sarg="data" sink="Calculate g^x (S)" darg="psec"/>
        <flow sarg="data" sink="Shared secret (R)" darg="psec"/>
        <flow sarg="data" sink="Select secret key (M)" darg="initiator_psec"/>
    </rng>

    <dhpub id="Calculate g^x (S)">
        <description>
            Calcutate Diffie-Hellman public value g^x for the initiator.
        </description>
        <flow sarg="pub" sink="Serialize g^x (S)" darg="data"/>
        <flow sarg="pub" sink="Select local pubkey (M)" darg="initiator_pub_local"/>
    </dhpub>

    <xform id="Serialize g^x (S)">
        <description>
            Serialize input g^x as an MPI called gxmpi
            (typically 196 bytes long, starting with
            "\x00\x00\x00\xc0")
        </description>
        <flow sarg="gxmpi" sink="Encrypt g^x (S)" darg="plaintext"/>
        <flow sarg="gxmpi" sink="Hash g^x (S)" darg="data"/>
        <flow sarg="gxmpi" sink="Concat M_B (S)" darg="g^x"/>
        <flow sarg="gxmpi" sink="Concat M_A (R)" darg="g^x"/>
        <arg name="data"/>
    </xform>

    <const id="Length of r (S)">
        <description>
            Length of the commitment key r. For OTR v3 this is 128 bit.
        </description>
        <flow sarg="const" sink="Random r (S)" darg="len"/>
    </const>

    <rng id="Random r (S)">
        <description>
            Random value r used for the commitment scheme.
        </description>
        <flow sarg="data" sink="Encrypt g^x (S)" darg="key"/>
        <flow sarg="data" sink="Reveal Signature (S)" darg="revealed_key"/>
    </rng>

    <hash id="Hash g^x (S)">
        <description>
            SHA256 hash of the encoded gxmpi value.
        </description>
        <flow sarg="hash" sink="D-H Commit (S)" darg="hashed_g^x"/>
    </hash>

    <!--
      ** Receive D-H Commit message
      -->
    <xform id="D-H Commit (R)">
        <description>
            First message of the AKE received by peer in the responder case.
        </description>
        <flow sarg="encrypted_g^x" sink="Decrypt g^x" darg="ciphertext"/>
        <flow sarg="hashed_g^x" sink="Verify hashed g^x (R)" darg="data1"/>
        <arg name="dhcm"/>
    </xform>

    <!--
      ** Send D-H Key message
      -->
    <xform id="D-H Key (S)">
        <description>
            Second message of the AKE send by us in the responder case.
        </description>
        <flow sarg="dhkm" sink="Network" darg="dhkm"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="g^y"/>
    </xform>

    <const id="DHKM Protocol Version (S)">
        <description>
            The version number of the OTR protocol for outgoing D-H Commit messages.
        </description>
        <flow sarg="const" sink="D-H Key (S)" darg="protocol_version"/>
    </const>

    <const id="DHKM Message Type (S)">
        <description>
            The message type of the outgoing D-H Commit messages.
        </description>
        <flow sarg="const" sink="D-H Key (S)" darg="message_type"/>
    </const>

    <const id="DHKM Sender Instance Tag (S)">
        <description>
            The instance tag of the person sending this message.
        </description>
        <flow sarg="const" sink="D-H Key (S)" darg="sender_instance_tag"/>
    </const>

    <const id="DHKM Receiver Instance Tag (S)">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <flow sarg="const" sink="D-H Key (S)" darg="receiver_instance_tag"/>
    </const>

    <const id="Length of y (S)">
        <description>
            Length of the Diffie-Hellman exponent y.
            At least 320 bits for OTR v3.
        </description>
        <flow sarg="const" sink="Random y (S)" darg="len"/>
    </const>

    <rng id="Random y (S)">
        <description>
            Random value y used to calcutate Diffie-Hellman public value
            g^y for the responder.
        </description>
        <flow sarg="data" sink="Calculate g^y (S)" darg="psec"/>
        <flow sarg="data" sink="Shared secret (S)" darg="psec"/>
        <flow sarg="data" sink="Select secret key (M)" darg="responder_psec"/>
    </rng>

    <dhpub id="Calculate g^y (S)">
        <description>
            Calcutate Diffie-Hellman public value g^y for the responder.
        </description>
        <flow sarg="pub" sink="Serialize g^y (S)" darg="data"/>
        <flow sarg="pub" sink="Select local pubkey (M)" darg="responder_pub_local"/>
    </dhpub>

    <xform id="Serialize g^y (S)">
        <description>
            Serialize input g^y as an MPI called gxmpi
            (typically 196 bytes long, starting with
            "\x00\x00\x00\xc0")
        </description>
        <flow sarg="gympi" sink="D-H Key (S)" darg="g^y"/>
        <flow sarg="gympi" sink="Concat M_A (S)" darg="g^y"/>
        <flow sarg="gympi" sink="Concat M_B (R)" darg="g^y"/>
        <arg name="data"/>
    </xform>

    <!--
      ** Receive D-H Key message
      -->
    <xform id="D-H Key (R)">
        <description>
            Second message of the AKE. It simply consists of Alice's D-H encryption key.
        </description>
        <flow sarg="g^y" sink="Shared secret (R)" darg="pub"/>
        <flow sarg="g^y" sink="Concat M_B (S)" darg="g^y"/>
        <flow sarg="g^y" sink="Concat M_A (R)" darg="g^y"/>
        <flow sarg="g^y" sink="Select remote pubkey (M)" darg="responder_remote_pub"/>
        <arg name="dhkm"/>
    </xform>

    <dhsec id="Shared secret (R)">
        <description>
            Compute the Diffie-Hellman shared secret s in the intitiator case.
        </description>
        <flow sarg="ssec" sink="Derive keys" darg="Initiator ssec"/>
    </dhsec>

    <!--
      ** Send Signature message
      -->
    <xform id="Signature (S)">
        <description>
            This is the final message of the AKE. Alice sends it to Bob,
            authenticating herself and the channel parameters to him.
        </description>
        <flow sarg="sigm" sink="Guard Signature (S)" darg="data"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="encrypted_signature"/>
        <arg name="macd_signature"/>
    </xform>

    <guard id="Guard Signature (S)">
        <flow sarg="data" sink="Network" darg="sigm"/>
    </guard>

    <const id="SIGM Protocol Version (S)">
        <description>
            The version number of the OTR protocol for outgoing Reveal Signature messages.
        </description>
        <flow sarg="const" sink="Signature (S)" darg="protocol_version"/>
    </const>

    <const id="SIGM Message Type (S)">
        <description>
            The message type of the outgoing Reveal Signature messages.
        </description>
        <flow sarg="const" sink="Signature (S)" darg="message_type"/>
    </const>

    <const id="SIGM Sender Instance Tag (S)">
        <description>
            The instance tag of the person sending this message.
        </description>
        <flow sarg="const" sink="Signature (S)" darg="sender_instance_tag"/>
    </const>

    <const id="SIGM Receiver Instance Tag (S)">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <flow sarg="const" sink="Signature (S)" darg="receiver_instance_tag"/>
    </const>

    <xform id="Concat M_A (S)">
        <description>
            Compute the 32-byte value M_A to be the SHA256-HMAC of the following
            data, using the key m1': g^y (MPI), g^x (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="M_B Input" sink="HMAC M_A (S)" darg="msg"/>
        <arg name="g^y"/>
        <arg name="g^x"/>
        <arg name="pub"/>
        <arg name="keyid"/>
    </xform>

    <hmac id="HMAC M_A (S)">
        <description>
            Compute the 32-byte value M_A to be the SHA256-HMAC of the following
            data, using the key m1': g^y (MPI), g^x (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="auth" sink="Sign M_A" darg="msg"/>
    </hmac>

    <sign id="Sign M_A">
        <description>
            This is the signature, using the private part of the key pub, of the
            32-byte MB (which does not need to be hashed again to produce the signature).
        </description>
        <flow sarg="auth" sink="Concat X_A" darg="Signed M_A"/>
    </sign>

    <xform id="Concat X_A">
        <description>
            Let X_A be the following structure: pub_A (PUBKEY), keyid_A (INT), sig_A(M_A) (SIG)
        </description>
        <flow sarg="X_A" sink="Encrypt X_A" darg="plaintext"/>
        <arg name="pub"/>
        <arg name="keyid"/>
        <arg name="Signed M_A"/>
    </xform>

    <const id="Counter for X_A">
        <description>
            Counter for encrypting X_A. Initial counter value 0.
        </description>
        <flow sarg="const" sink="Encrypt X_A" darg="ctr"/>
    </const>

    <encrypt id="Encrypt X_A">
        <description>
            Encrypt X_A using AES128-CTR with key c and initial counter value 0.
        </description>
        <flow sarg="ciphertext" sink="Signature (S)" darg="encrypted_signature"/>
        <flow sarg="ciphertext" sink="MAC Encrypted X_A" darg="msg"/>
    </encrypt>

    <!-- FIXME: Add DATA/MAC etc. encoding -->
    <hmac id="MAC Encrypted X_A">
        <description>
            The SHA256-HMAC of the encrypted signature field, using the key m2'.
        </description>
        <flow sarg="auth" sink="Trim X_A" darg="macd_signature"/>
    </hmac>

    <xform id="Trim X_A">
        <description>
            This is the SHA256-HMAC-160 (that is, the first 160 bits of the SHA256-HMAC)
            of the encrypted signature field.
        </description>
        <flow sarg="macd_signature" sink="Signature (S)" darg="macd_signature"/>
        <arg name="macd_signature"/>
    </xform>

    <!--
      ** Receive Signature message
      -->
    <xform id="Signature (R)">
        <description>
            This is the final message of the AKE. Alice sends it to Bob,
            authenticating herself and the channel parameters to him.
        </description>
        <flow sarg="encrypted_signature" sink="Decrypt X_A" darg="ciphertext"/>
        <flow sarg="encrypted_signature" sink="Verify Encrypted X_A" darg="msg"/>
        <flow sarg="macd_signature" sink="Verify Encrypted X_A" darg="auth"/>
        <arg name="sigm"/>
    </xform>

    <verify_hmac id="Verify Encrypted X_A">
        <description>
            Check the SHA256-HMAC-160 authenticator for the encrypted signature.
        </description>
        <flow sarg="result" sink="Guard Encrypted X_A" darg="cond"/>
    </verify_hmac>

    <guard id="Guard Encrypted X_A">
        <description>
            Signal encrypted state only if the HMAC was correct.
        </description>
        <flow sarg="data" sink="Guard Signed M_A" darg="data"/>
    </guard>

    <const id="Counter for X_A Decryption">
        <description>
            Counter for decrypting X_A. Initial value is 0.
        </description>
        <flow sarg="const" sink="Decrypt X_A" darg="ctr"/>
    </const>

    <decrypt id="Decrypt X_A">
        <description>
            Decrypt X_A received in Signature Message using
            AES128-CTR with key c' and initial counter value 0.
        </description>
        <flow sarg="plaintext" sink="Split X_A" darg="X_A"/>
    </decrypt>

    <xform id="Split X_A">
        <description>
            Split X_A into pub_A, keyid_A, sig_A(M_A)
        </description>
        <flow sarg="pub_A" sink="Verify Sig M_A (R)" darg="pkey"/>
        <flow sarg="Signature" sink="Verify Sig M_A (R)" darg="auth"/>
        <flow sarg="pub_A" sink="Concat M_A (R)" darg="pub"/>
        <flow sarg="keyid_A" sink="Concat M_A (R)" darg="keyid"/>
        <arg name="X_A"/>
    </xform>

    <xform id="Concat M_A (R)">
        <description>
            Compute the 32-byte value M_A to be the SHA256-HMAC of the following
            data, using the key m1': g^y (MPI), g^x (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="M_A Input" sink="HMAC M_A (R)" darg="msg"/>
        <arg name="g^y"/>
        <arg name="g^x"/>
        <arg name="pub"/>
        <arg name="keyid"/>
    </xform>

    <hmac id="HMAC M_A (R)">
        <description>
            Compute the 32-byte value M_A to be the SHA256-HMAC of the following
            data, using the key m1: g^y (MPI), g^x (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="auth" sink="Verify Sig M_A (R)" darg="msg"/>
    </hmac>

    <verify_sig id="Verify Sig M_A (R)">
        <description>
            Verify the signature of M_A send by responder Reveal Signature message.
        </description>
        <flow sarg="result" sink="Guard Signed M_A" darg="cond"/>
    </verify_sig>

    <guard id="Guard Signed M_A">
        <description>
            Only signal MSGSTATE_ENCRYPTED (passed on from Guard Encrypted X_A)
            if the signature of M_A was correct.
        </description>
        <flow sarg="data" sink="AKE State" darg="state"/>
    </guard>

    <!--
      ** Send Reveal Signature Message
      -->
    <xform id="Reveal Signature (S)">
        <description>
            Primitive assembling the third message of the AKE,
            the Reveal Signature Message. It reveals the D-H
            encryption key, thuse establishing and authenticating
            the encrypted channel.
        </description>
        <flow sarg="rvsm" sink="Network" darg="rvsm"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="revealed_key"/>
        <arg name="encrypted_signature"/>
        <arg name="macd_signature"/>
    </xform>

    <const id="RVSM Protocol Version (S)">
        <description>
            The version number of the OTR protocol for outgoing Reveal Signature messages.
        </description>
        <flow sarg="const" sink="Reveal Signature (S)" darg="protocol_version"/>
    </const>

    <const id="RVSM Message Type (S)">
        <description>
            The message type of the outgoing Reveal Signature messages.
        </description>
        <flow sarg="const" sink="Reveal Signature (S)" darg="message_type"/>
    </const>

    <const id="RVSM Sender Instance Tag (S)">
        <description>
            The instance tag of the person sending this message.
        </description>
        <flow sarg="const" sink="Reveal Signature (S)" darg="sender_instance_tag"/>
    </const>

    <const id="RVSM Receiver Instance Tag (S)">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <flow sarg="const" sink="Reveal Signature (S)" darg="receiver_instance_tag"/>
    </const>

    <xform id="Concat M_B (S)">
        <description>
            Compute the 32-byte value M_B to be the SHA256-HMAC of the following
            data, using the key m1: g^x (MPI), g^y (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="M_B Input" sink="HMAC M_B (S)" darg="msg"/>
        <arg name="g^x"/>
        <arg name="g^y"/>
        <arg name="pub"/>
        <arg name="keyid"/>
    </xform>

    <hmac id="HMAC M_B (S)">
        <description>
            Compute the 32-byte value M_B to be the SHA256-HMAC of the following
            data, using the key m1: g^x (MPI), g^y (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="auth" sink="Sign M_B" darg="msg"/>
    </hmac>

    <sign id="Sign M_B">
        <description>
            This is the signature, using the private part of the key pub, of the
            32-byte M_B (which does not need to be hashed again to produce the signature).
        </description>
        <flow sarg="auth" sink="Concat X_B" darg="Signed M_B"/>
    </sign>

    <xform id="Concat X_B">
        <description>
            Let X_B be the following structure: pub_B (PUBKEY), keyid_B (INT), sig_B(M_B) (SIG)
        </description>
        <flow sarg="X_B" sink="Encrypt X_B" darg="plaintext"/>
        <arg name="pub"/>
        <arg name="keyid"/>
        <arg name="Signed M_B"/>
    </xform>

    <const id="Counter for X_B">
        <description>
            Counter for encrypting X_B. Initial counter value 0.
        </description>
        <flow sarg="const" sink="Encrypt X_B" darg="ctr"/>
    </const>

    <encrypt id="Encrypt X_B">
        <description>
            Encrypt X_B using AES128-CTR with key c and initial counter value 0.
        </description>
        <flow sarg="ciphertext" sink="Reveal Signature (S)" darg="encrypted_signature"/>
        <flow sarg="ciphertext" sink="MAC Encrypted X_B" darg="msg"/>
    </encrypt>

    <!-- FIXME: Add DATA/MAC etc. encoding -->
    <hmac id="MAC Encrypted X_B">
        <description>
            The SHA256-HMAC of the encrypted signature field, using the key m2.
        </description>
        <flow sarg="auth" sink="Trim X_B" darg="macd_signature"/>
    </hmac>

    <xform id="Trim X_B">
        <description>
            This is the SHA256-HMAC-160 (that is, the first 160 bits of the SHA256-HMAC)
            of the encrypted signature field.
        </description>
        <flow sarg="macd_signature" sink="Reveal Signature (S)" darg="macd_signature"/>
        <arg name="macd_signature"/>
    </xform>

    <!--
      ** Receive Reveal Signature Message
      -->
    <xform id="Reveal Signature (R)">
        <description>
            Primitive assembling the third message of the AKE,
            the Reveal Signature Message. It reveals the D-H
            encryption key, thuse establishing and authenticating
            the encrypted channel.
        </description>
        <flow sarg="revealed_key" sink="Decrypt g^x" darg="key"/>
        <flow sarg="encrypted_signature" sink="Decrypt X_B" darg="ciphertext"/>
        <flow sarg="encrypted_signature" sink="Verify Encrypted X_B" darg="msg"/>
        <flow sarg="macd_signature" sink="Verify Encrypted X_B" darg="auth"/>
        <arg name="rvsm"/>
    </xform>

    <const id="Counter for g^x (R)">
        <description>
            Counter for decrypting g^x. This is always zero.
        </description>
        <flow sarg="const" sink="Decrypt g^x" darg="ctr"/>
    </const>

    <decrypt id="Decrypt g^x">
        <description>
            Use the received value of r to decrypt the value of g^x
            received in the D-H Commit Message
        </description>
        <flow sarg="plaintext" sink="Hash g^x (R)" darg="data"/>
        <flow sarg="plaintext" sink="Verify g^x (R)" darg="data"/>
        <flow sarg="plaintext" sink="Shared secret (S)" darg="pub"/>
        <flow sarg="plaintext" sink="Select remote pubkey (M)" darg="initiator_remote_pub"/>
    </decrypt>

    <hash id="Hash g^x (R)">
        <description>
            SHA256 hash of the encoded gxmpi value.
        </description>
        <flow sarg="hash" sink="Verify hashed g^x (R)" darg="data2"/>
    </hash>

    <comp id="Verify hashed g^x (R)">
        <description>
            Check that the hash of the gxmpi sent encrypted in the
            D-H Commit message matches the value decrypted with
            the key received in the Reveal Signature Message.
        </description>
        <flow sarg="result" sink="Verify g^x (R)" darg="cond"/>
    </comp>

    <guard id="Verify g^x (R)">
        <description>
            Only use g^x if the hash was correct.
        </description>
        <flow sarg="data" sink="Concat M_B (R)" darg="g^x"/>
        <flow sarg="data" sink="Concat M_A (S)" darg="g^x"/>
    </guard>

    <verify_hmac id="Verify Encrypted X_B">
        <description>
            Check the SHA256-HMAC-160 authenticator for the encrypted signature.
        </description>
        <flow sarg="result" sink="Guard Encrypted X_B" darg="cond"/>
    </verify_hmac>

    <guard id="Guard Encrypted X_B">
        <description>
            Allow Signature Message if the HMAC was correct.
        </description>
        <flow sarg="data" sink="Guard Signed M_B" darg="data"/>
    </guard>

    <const id="Counter for X_B Decryption">
        <description>
            Counter for decrypting X_B. Initial value is 0.
        </description>
        <flow sarg="const" sink="Decrypt X_B" darg="ctr"/>
    </const>

    <decrypt id="Decrypt X_B">
        <description>
            Decrypt X_B received in Reveal Signature Message using
            AES128-CTR with key c and initial counter value 0.
        </description>
        <flow sarg="plaintext" sink="Split X_B (R)" darg="X_B"/>
    </decrypt>

    <xform id="Split X_B (R)">
        <description>
            Split X_B into pub_B, keyid_B, sig_B(M_B)
        </description>
        <flow sarg="pub_B" sink="Concat M_B (R)" darg="pub"/>
        <flow sarg="keyid_B" sink="Concat M_B (R)" darg="keyid"/>
        <flow sarg="Signature" sink="Verify Sig M_B" darg="auth"/>
        <flow sarg="pub_B" sink="Verify Sig M_B" darg="pkey"/>
        <arg name="X_B"/>
    </xform>

    <xform id="Concat M_B (R)">
        <description>
            Compute the 32-byte value MB to be the SHA256-HMAC of the following
            data, using the key m1: g^x (MPI), g^y (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="M_B Input" sink="HMAC M_B (R)" darg="msg"/>
        <arg name="g^x"/>
        <arg name="g^y"/>
        <arg name="pub"/>
        <arg name="keyid"/>
    </xform>

    <hmac id="HMAC M_B (R)">
        <description>
            Compute the 32-byte value M_B to be the SHA256-HMAC of the following
            data, using the key m1: g^x (MPI), g^y (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="auth" sink="Verify Sig M_B" darg="msg"/>
    </hmac>

    <verify_sig id="Verify Sig M_B">
        <description>
            Verify the signature of M_B send by initiator in Reveal Signature message.
        </description>
        <flow sarg="result" sink="Guard Signed M_B" darg="cond"/>
    </verify_sig>

    <guard id="Guard Signed M_B">
        <description>
            Only signal MSGSTATE_ENCRYPTED (passed on from Guard Encrypted X_B)
            if the signature of M_B was correct.
        </description>
        <flow sarg="data" sink="AKE State" darg="state"/>
    </guard>

    <dhsec id="Shared secret (S)">
        <description>
            Compute the Diffie-Hellman shared secret s in the responder case.
        </description>
        <flow sarg="ssec" sink="Derive keys" darg="Responder ssec"/>
    </dhsec>

    <!--
      ** Message encryption
      -->

    <!-- Key management -->

    <xform id="Select remote pubkey (M)">
        <description>
            Picks the most recent D-H encryption key received from the remote
            party, either in a Data Message or in the AKE.
        </description>
        <flow sarg="current_key" sink="Select secret key (M)" darg="order"/>
        <flow sarg="recipient_keyid" sink="Data (S)" darg="recipient_keyid"/>
        <flow sarg="recipient_keyid" sink="Concat authenticator (S)" darg="recipient_keyid"/>
        <flow sarg="pub" sink="Shared secret (M)" darg="pub"/>
        <flow sarg="pub" sink="Determine end (M)" darg="remote_pubkey"/>
        <arg name="initiator_remote_pub"/>
        <arg name="responder_remote_pub"/>
        <arg name="pub_remote"/>

        <!-- This is the sender_pubkey value we receive in encrypted data messages sent to us -->
        <arg name="sender_keyid"/>
    </xform>

    <const id="Length of y (M)">
        <description>
            Lenght of the Diffie-Hellmen exponent y.
            At least 320 bits for OTR v3.
        </description>
        <flow sarg="const" sink="Random y (M)" darg="len"/>
    </const>

    <rng id="Random y (M)">
        <description>
            Random value y used to calcutate Diffie-Hellman public value
            g^y for the next data message.
        </description>
        <flow sarg="data" sink="Calculate next D-H key (M)" darg="psec"/>
        <flow sarg="data" sink="Select secret key (M)" darg="data_psec"/>
    </rng>

    <dhpub id="Calculate next D-H key (M)">
        <description>
            Diffie-Hellman public value g^y for the next data message.
        </description>
        <flow sarg="pub" sink="Serialize g^y (M)" darg="data"/>
        <flow sarg="pub" sink="Select local pubkey (M)" darg="pub_local"/>
    </dhpub>
    
    <xform id="Serialize g^y (M)">
        <description>
            Serialize Diffie-Hellman public value as MPI
        </description>
        <flow sarg="mpi" sink="Data (S)" darg="dh_y"/>
        <flow sarg="mpi" sink="Concat authenticator (S)" darg="dh_y"/>
        <arg name="data"/>
    </xform>

    <xform id="Select local pubkey (M)">
        <description>
            Picks the most recent local D-H encryption key remote side
            has acknowledged receiving by using it in a Data Message
            or, failing that, in the AKE.
        </description>
        <flow sarg="pub" sink="Shared secret (M)" darg="pub"/>
        <flow sarg="pub" sink="Determine end (M)" darg="local_pubkey"/>
        <flow sarg="sender_keyid" sink="Data (S)" darg="sender_keyid"/>
        <flow sarg="sender_keyid" sink="Concat authenticator (S)" darg="sender_keyid"/>
        <arg name="pub_local"/>
        <arg name="responder_pub_local"/>
        <arg name="initiator_pub_local"/>
        <!-- This is the recipient_pubkey value we receive in encrypted data
        messages sent to us. It denotes our pubkey the peer has used for
        encryption/integrity protection. -->
        <arg name="recipient_keyid"/>
    </xform>

    <permute id="Select secret key (M)">
        <!-- FIXME: If the "recipient keyid" in the Data message equals
         our_keyid, then he's seen the public part of our most recent DH key
         pair, so you must securely forget our_dh[our_keyid-1], increment
         our_keyid, and set our_dh[our_keyid] to a new DH key pair which you
         generate. -->
        <description>
            Select the shared secret for the next message to be either
            the result of AKE or the result of a subsequent DH exchange
            using previous dh_y contained in a data message.
        </description>
        <flow sarg="psec" sink="Shared secret (M)" darg="psec"/>
        <arg name="data_psec"/>
        <arg name="initiator_psec"/>
        <arg name="responder_psec"/>
    </permute>

    <dhsec id="Shared secret (M)">
        <description>
            Calculate DH shared secret s for data message.
        </description>
        <flow sarg="ssec" sink="Serialize s (M)" darg="s"/>
    </dhsec>

    <xform id="Serialize s (M)">
        <description>
            Serialize shared secret as MPI
        </description>
        <flow sarg="secbytes" sink="Concat sendkey (M)" darg="secbytes"/>
        <flow sarg="secbytes" sink="Concat recvkey (M)" darg="secbytes"/>
        <arg name="s"/>
    </xform>

    <xform id="Determine end (M)">
        <description>
            The sender determines if she is the "low" end or the "high" end
            of this Data Message. If the senders public key is numerically
            greater than the receivers public key, then she is the "high"
            end. Otherwise, she is the "low" end.
        </description>
        <flow sarg="sendbyte" sink="Concat sendkey (M)" darg="b"/>
        <flow sarg="recvbyte" sink="Concat recvkey (M)" darg="b"/>
        <arg name="local_pubkey"/>
        <arg name="remote_pubkey"/>
    </xform>

    <!-- Sending a data message to the network -->

    <xform id="Concat sendkey (M)">
        <description>
            Byte b, followed by secbytes.
        </description>
        <flow sarg="b|secbyte" sink="Derive sending enc key (M)" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Derive sending enc key (M)">
        <description>
            The 160-bit output of the SHA-1 hash of the (5+len)
            bytes consisting of the byte b, followed by secbytes
        </description>
        <flow sarg="hash" sink="Truncate sending enc key (M)" darg="data"/>
    </hash>

    <xform id="Truncate sending enc key (M)">
        <description>
            The first 16 bytes of h1(sendbyte)
        </description>
        <flow sarg="data" sink="Derive sending MAC key (M)" darg="data"/>
        <flow sarg="data" sink="Encrypt (M)" darg="key"/>
        <flow sarg="data" sink="Compare counter" darg="data"/>
        <arg name="data"/>
    </xform>

    <hash id="Derive sending MAC key (M)">
        <description>
            The 20-byte SHA-1 hash of the 16-byte sending AES key.
        </description>
        <flow sarg="hash" sink="Calculate authenticator (M)" darg="key"/>
        <flow sarg="hash" sink="Release MAC key (M)" darg="data"/>
    </hash>

    <!-- FIXME: The must be logic deciding whether we can already release the key (i.e. it's not in use anymore!) -->
    <release id="Release MAC key (M)">
        <flow sarg="data" sink="Data (S)" darg="old_mac_keys"/>
    </release>

    <const id="Initial counter (M)">
        <flow sarg="const" sink="Counter (M)" darg="init"/>
    </const>

    <scomp id="Compare counter">
        <flow sarg="result" sink="Counter (M)" darg="trigger"/>
    </scomp>

    <counter id="Counter (M)">
        <flow sarg="ctr" sink="Encrypt (M)" darg="ctr"/>
        <flow sarg="ctr" sink="Data (S)" darg="top_half_of_counter_init"/>
        <flow sarg="ctr" sink="Concat authenticator (S)" darg="top_half_of_counter_init"/>
    </counter>

    <encrypt id="Encrypt (M)">
        <description>
            Perform AES128 counter-mode encryption of the message using
            the most recent D-H encryption keys.
        </description>
        <flow sarg="ciphertext" sink="Data (S)" darg="encrypted_message"/>
        <flow sarg="ciphertext" sink="Concat authenticator (S)" darg="encrypted_message"/>
    </encrypt>

    <xform id="Concat authenticator (S)">
        <description>
            Input for the authenticator to MAC outgoing messages.
        </description>
        <flow sarg="message" sink="Calculate authenticator (M)" darg="msg"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="flags"/>
        <arg name="sender_keyid"/>
        <arg name="recipient_keyid"/>
        <arg name="dh_y"/>
        <arg name="top_half_of_counter_init"/>
        <arg name="encrypted_message"/>
    </xform>

    <hmac id="Calculate authenticator (M)">
        <description>
            The SHA1-HMAC, using the appropriate MAC key of everything from
            the Protocol version to the end of the encrypted message.
        </description>
        <flow sarg="auth" sink="Data (S)" darg="authenticator"/>
    </hmac>

    <const id="Data Protocol Version (M)">
        <description>
            The version number of the OTR protocol for outgoing D-H Commit messages.
        </description>
        <flow sarg="const" sink="Data (S)" darg="protocol_version"/>
        <flow sarg="const" sink="Concat authenticator (S)" darg="protocol_version"/>
    </const>

    <const id="Data Message Type (M)">
        <description>
            The message type of the outgoing D-H Commit messages.
        </description>
        <flow sarg="const" sink="Data (S)" darg="message_type"/>
        <flow sarg="const" sink="Concat authenticator (S)" darg="message_type"/>
    </const>

    <const id="Data Sender Instance Tag (M)">
        <description>
            The instance tag of the person sending this message.
        </description>
        <flow sarg="const" sink="Data (S)" darg="sender_instance_tag"/>
        <flow sarg="const" sink="Concat authenticator (S)" darg="sender_instance_tag"/>
    </const>

    <const id="Data Receiver Instance Tag (M)">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <flow sarg="const" sink="Data (S)" darg="receiver_instance_tag"/>
        <flow sarg="const" sink="Concat authenticator (S)" darg="receiver_instance_tag"/>
    </const>

    <const id="Data Flags (M)">
        <description>
            The bitwise-OR of the flags for this message.
        </description>
        <flow sarg="const" sink="Data (S)" darg="flags"/>
        <flow sarg="const" sink="Concat authenticator (S)" darg="flags"/>
    </const>

    <xform id="Data (S)">
        <description>
            Encrypted data message sent to the network.
        </description>
        <flow sarg="data" sink="Network" darg="data"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="flags"/>
        <arg name="sender_keyid"/>
        <arg name="recipient_keyid"/>
        <arg name="dh_y"/>
        <arg name="top_half_of_counter_init"/>
        <arg name="encrypted_message"/>
        <arg name="authenticator"/>
        <arg name="old_mac_keys"/>
    </xform>

    <!-- Receiving a data message from network -->

    <xform id="Concat recvkey (M)">
        <description>
            Byte b, followed by secbytes.
        </description>
        <flow sarg="b|secbytes" sink="Derive receiving enc key (M)" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Derive receiving enc key (M)">
        <description>
            The 160-bit output of the SHA-1 hash of the (5+len)
            bytes consisting of the byte b, followed by secbytes
        </description>
        <flow sarg="hash" sink="Truncate receiving enc key (M)" darg="data"/>
    </hash>

    <xform id="Truncate receiving enc key (M)">
        <description>
            The first 16 bytes of h1(recvbyte)
        </description>
        <flow sarg="data" sink="Derive receiving MAC key (M)" darg="data"/>
        <flow sarg="data" sink="Decrypt (M)" darg="key"/>
        <arg name="data"/>
    </xform>

    <hash id="Derive receiving MAC key (M)">
        <description>
            The 20-byte SHA-1 hash of the 16-byte sending AES key.
        </description>
        <flow sarg="hash" sink="Verify MAC (M)" darg="key"/>
    </hash>

    <xform id="Data (R)">
        <description>
            Encrypted data message received from the network.
        </description>
        <flow sarg="protocol_version"         sink="Concat authenticator (R)" darg="protocol_version"/>
        <flow sarg="message_type"             sink="Concat authenticator (R)" darg="message_type"/>
        <flow sarg="sender_instance_tag"      sink="Concat authenticator (R)" darg="sender_instance_tag"/>
        <flow sarg="receiver_instance_tag"    sink="Concat authenticator (R)" darg="receiver_instance_tag"/>
        <flow sarg="flags"                    sink="Concat authenticator (R)" darg="flags"/>
        <flow sarg="sender_keyid"             sink="Select remote pubkey (M)" darg="sender_keyid"/>
        <flow sarg="sender_keyid"             sink="Concat authenticator (R)" darg="sender_keyid"/>
        <flow sarg="sender_keyid"             sink="Verify counter (M)"       darg="sender_keyid"/>
        <flow sarg="recipient_keyid"          sink="Select local pubkey (M)"  darg="recipient_keyid"/>
        <flow sarg="recipient_keyid"          sink="Concat authenticator (R)" darg="recipient_keyid"/>
        <flow sarg="recipient_keyid"          sink="Verify counter (M)"       darg="recipient_keyid"/>
        <flow sarg="dh_y"                     sink="Select remote pubkey (M)" darg="pub_remote"/>
        <flow sarg="dh_y"                     sink="Concat authenticator (R)" darg="dh_y"/>
        <flow sarg="top_half_of_counter_init" sink="Decrypt (M)"              darg="ctr"/>
        <flow sarg="top_half_of_counter_init" sink="Concat authenticator (R)" darg="top_half_of_counter_init"/>
        <flow sarg="top_half_of_counter_init" sink="Verify counter (M)"       darg="counter"/>
        <flow sarg="encrypted_message"        sink="Guard MAC (M)"            darg="data"/>
        <flow sarg="encrypted_message"        sink="Concat authenticator (R)" darg="encrypted_message"/>
        <flow sarg="authenticator"            sink="Verify MAC (M)"           darg="auth"/>
        <arg name="data"/>
    </xform>

    <xform id="Concat authenticator (R)">
        <description>
            Input for the authenticator for checking received messages.
        </description>
        <flow sarg="message" sink="Verify MAC (M)" darg="msg"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="flags"/>
        <arg name="sender_keyid"/>
        <arg name="recipient_keyid"/>
        <arg name="dh_y"/>
        <arg name="top_half_of_counter_init"/>
        <arg name="encrypted_message"/>
    </xform>

    <verify_hmac id="Verify MAC (M)">
        <description>
             Use the "receiving MAC key" to verify the MAC on the message.
        </description>
        <flow sarg="result" sink="Guard MAC (M)" darg="cond"/>
    </verify_hmac>

    <guard id="Guard MAC (M)">
        <description>
              If the MAC does not verify, reject the message.
        </description>
        <flow sarg="data" sink="Guard counter (M)" darg="data"/>
    </guard>

    <xform id="Verify counter (M)">
        <description>
            Check that the counter in the Data message is strictly larger
            than the last counter you saw using this pair of keys.
        </description>
        <flow sarg="result" sink="Guard counter (M)" darg="cond"/>
        <arg name="sender_keyid"/>
        <arg name="recipient_keyid"/>
        <arg name="counter"/>
    </xform>

    <guard id="Guard counter (M)">
        <description>
            If counter is invalid, reject the message.
        </description>
        <flow sarg="data" sink="Decrypt (M)" darg="ciphertext"/>
    </guard>

    <decrypt id="Decrypt (M)">
        <description>
            Decrypt the message using the receiving encryption key.
        </description>
        <flow sarg="plaintext" sink="User" darg="data"/>
    </decrypt>

</spg>
