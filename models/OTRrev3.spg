<?xml version="1.0"?>
<spg>

    <!--
      ** Environment
      -->
    <env id="Network" confidentiality="false" integrity="false">
        <description>
            Network environment source without confidentiality or integrity guarantees.
        </description>
        <config port="10000" mode="server"/>
        <flow sarg="data" sink="Network Mux" darg="msg"/>
        <arg name="data"/>
    </env>

    <xform id="Network Mux" code="network_mux">
        <description>
            Disassemble incoming OTR messages and compile outgoing OTR messages
        </description>
        <flow sarg="msg" sink="Network" darg="data"/>
        <flow sarg="dhcm" sink="D-H Commit (R)" darg="dhcm"/>
        <flow sarg="dhkm" sink="D-H Key (R)" darg="dhkm"/>
        <flow sarg="rvsm" sink="Reveal Signature (R)" darg="rvsm"/>
        <flow sarg="sigm" sink="Signature (R)" darg="sigm"/>
        <flow sarg="data" sink="Data (R)" darg="data"/>
        <flow sarg="rit" sink="Reveal Signature (S)" darg="receiver_instance_tag"/>
        <arg name="msg"/>
        <arg name="dhkm"/>
        <arg name="dhcm"/>
        <arg name="rvsm"/>
        <arg name="sigm"/>
        <arg name="data"/>
    </xform>

    <env id="User" confidentiality="true" integrity="true">
        <description>
            User data environment guaranteeing confidentiality and integrity.
        </description>
        <config port="10001" mode="server"/>
        <flow sarg="data" sink="Encrypt (M)" darg="plaintext"/>
        <arg name="data"/>
    </env>

    <!-- FIXME: User_Interface should not require confidentiality (after all,
         displaying SSID is not confidential). However, if we require no
         confidentiality here, there is a conflict as hash operations as used
         to create SSID do not remove confidentialty from the output. This is
         right for key derivation, but wrong in this case. How do we distinguish
         these cases? -->
    <env id="User_Interface" confidentiality="true" integrity="true" code="print">
        <description>
            User interface environment guaranteeing integrity for displayed
            content.
        </description>
        <config port="10002" mode="server"/>
        <arg name="data"/>
    </env>

    <!--
      ** AKE
      -->

    <!-- Long term keys -->
    <const id="pub" confidentiality="false">
        <description>
            Public key
        </description>
        <config hexbytes="0000008080000000000000229cac14cdce2a3370141d0e1dcb8fa5820c4b0cd9994d33f5baca6e611eed7acf7b294260021ca6b01fa59c48c1d0ef052029a6a85513c35a7c5a6cd08da7c0b30dee2369f2599731e1431d1b84630708ce0ed251e7053b6176290f4c8f4bac08254b5f6ccd04b56147701823b679c6c81ff328d9ee8d2fe700000014f15bc6eaad1f0f58fcae7530c4ada70371ac70c100000080359280e0063ebe9ece613207c4ef294abe082ae40c72b9c87f9ca88a2e8b0a7ad69db512bfb63bb155797ea6884e3ab82d40fff9cb8f028e520dbf0a9f902f4c02cd670aea11531f071477ce777f37b84e3b4b1ed7f661466cf585c62511f7a636c1a22bd4cb82ed6cdf507b9f7071779eed21d59e2685b40162790fe1e5b4ab000000805b1b255518e3a6edda4ff34301fc875e9071f53c6f651b4539321e63c2f58296271f8c45080131baf6f66688be6c0e9223f3a2d641ad047fafbfb2851e517046df3d4527e9e23bd5d5753696c782a8b984cf12a76dbb9fab8e2649d3d5caeda69a720daa18728a5f28c764ada5d33ee9cd1e303581af26e60f186018f7cd25b6"/>
        <flow sarg="const" sink="Branch pub const" darg="data">
            <assert integrity="true">
                Public key by its nature is not confidential, but
                an attacker must not make us use the wrong pulic
                key.
            </assert>
        </flow>
    </const>

    <branch id="Branch pub const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Concat M_A (S)" darg="pub"/>
        <flow sarg="const#2" sink="Concat X_A" darg="pub"/>
        <flow sarg="const#3" sink="Concat M_B (S)" darg="pub"/>
        <flow sarg="const#4" sink="Concat X_B" darg="pub"/>
        <flow sarg="const#5" sink="Sign M_A" darg="pubkey"/>
        <flow sarg="const#6" sink="Sign M_B" darg="pubkey"/>
    </branch>

    <const id="priv" confidentiality="true">
        <description>
            Private part of DSA key
        </description>
        <config hexbytes="deadc0de"/>
        <flow sarg="const" sink="Branch priv const" darg="data">
            <assert confidentiality="true" integrity="true">
                Private key must be confidential and must not be chosen
                by attacker.
            </assert>
        </flow>
    </const>

    <branch id="Branch priv const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Sign M_A" darg="privkey">
            <assert confidentiality="true" integrity="true">
                Signature key must be confidential and not be chosen by attacker.
            </assert>
        </flow>
        <flow sarg="const#2" sink="Sign M_B" darg="privkey">
            <assert confidentiality="true" integrity="true">
                Signature key must be confidential and not be chosen by attacker.
            </assert>
        </flow>
    </branch>

    <!-- AKE -->
    <const id="State encrypted" confidentiality="false">
        <description>
            Constant signaling successful key exchange.
        </description>
        <config int="0"/>
        <flow sarg="const" sink="Branch State encrypted const" darg="data">
            <assert integrity="true">
                This indicate successful key exchange which the user will
                rely on. An attacker must not forge this as the user could
                then believe that encryption is in place while it isn't.
            </assert>
        </flow>
    </const>

    <branch id="Branch State encrypted const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Guard Encrypted X_A" darg="data"/>
        <flow sarg="const#2" sink="Guard Encrypted X_B" darg="data"/>
    </branch>

    <xform id="AKE State" code="ake_state">
        <description>
            Current state of the AKE
        </description>
        <flow sarg="encrypted" sink="Guard Signature (S)" darg="cond"/>
        <arg name="initiator_state"/>
        <arg name="responder_state"/>
    </xform>

    <!--
      ** Key derivation
      -->

    <xform id="Derive keys" code="derive_keys">
        <description>
            Serialize the value of shared secret s as a minimum-length MPI secbytes.
        </description>
        <flow sarg="secbytes#1" sink="Concat ssid" darg="secbytes">
            <assert confidentiality="true" integrity="true">
                All keys can be derived from secbytes.
            </assert>
        </flow>

        <flow sarg="secbytes#2" sink="Concat c" darg="secbytes">
            <assert confidentiality="true" integrity="true">
                All keys can be derived from secbytes.
            </assert>
        </flow>

        <flow sarg="secbytes#3" sink="Concat m1" darg="secbytes">
            <assert confidentiality="true" integrity="true">
                All keys can be derived from secbytes.
            </assert>
        </flow>

        <flow sarg="secbytes#4" sink="Concat m2" darg="secbytes">
            <assert confidentiality="true" integrity="true">
                All keys can be derived from secbytes.
            </assert>
        </flow>

        <flow sarg="secbytes#5" sink="Concat m1'" darg="secbytes">
            <assert confidentiality="true" integrity="true">
                All keys can be derived from secbytes.
            </assert>
        </flow>

        <flow sarg="secbytes#6" sink="Concat m2'" darg="secbytes">
            <assert confidentiality="true" integrity="true">
                All keys can be derived from secbytes.
            </assert>
        </flow>

        <arg name="responder_ssec"/>
        <arg name="initiator_ssec"/>
    </xform>

    <const id="Prefix ssid" confidentiality="false">
        <description>
            Prefix b to calculate ssid, value 0x00
        </description>
        <config hexbytes="00"/>
        <flow sarg="const" sink="Concat ssid" darg="b">
            <assert integrity="true">
                Attacker must not be able to choose prefix used in KDF (because attacker could e.g use a MAC key as a decryption key)
            </assert>
        </flow>
    </const>

    <xform id="Concat ssid" code="concat">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash ssid" darg="data">
            <assert integrity="true" confidentiality="true">
                The 'result' value contains 
            </assert>
        </flow>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash ssid">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <config algo="SHA256"/>
        <flow sarg="hash" sink="Trim ssid" darg="data">
            <assert integrity="true">
                Attacker must not choose ssid, as she could impersonate a connection
                towards user otherwise.
            </assert>
        </flow>
    </hash>

    <xform id="Trim ssid" code="prefix">
        <description>
            Let ssid be the first 64 bits of h2(0x00).
        </description>
        <config length_in_bits="64"/>
        <flow sarg="ssid" sink="User_Interface" darg="data">
            <assert integrity="true" >
                Attacker must not choose ssid, as she could impersonate a connection
                towards user otherwise. SSID must not be confidential as it is
                displayed to the user openly. FIXME: This is not possible right now,
                see comment at User_Interface component.
            </assert>
        </flow>
        <arg name="data"/>
    </xform>

    <const id="Prefix c" confidentiality="false">
        <description>
            Prefix b to calculate c and c', value 0x01
        </description>
        <config hexbytes="01"/>
        <flow sarg="const" sink="Concat c" darg="b">
            <assert integrity="true">
                Attacker must not be able to choose prefix used in KDF (because attacker could e.g use a MAC key as a decryption key)
            </assert>
        </flow>
    </const>

    <xform id="Concat c" code="concat">
        <description>
            Byte b followed by secbytes.
        </description>

        <flow sarg="result" sink="Hash c" darg="data">
            <assert confidentiality="true" integrity="true">
                Encryption key must not be chosen or known by attacker.
            </assert>
        </flow>

        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash c">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <config algo="SHA256"/>
        <flow sarg="hash" sink="Split c" darg="data">
            <assert confidentiality="true" integrity="true">
                Encryption key must not be chosen or known by an attacker. 
            </assert>
        </flow>
    </hash>

    <xform id="Split c" code="split">
        <description>
            Let c be the first 128 bits of h2(0x01),
            and let c' be the second 128 bits of h2(0x01).
        </description>
        <flow sarg="left" sink="Branch c" darg="data"/>
        <flow sarg="right" sink="Branch c'" darg="data"/>
        <arg name="data"/>
    </xform>

    <branch id="Branch c">
        <description>
            Branch c to encrypt/decrypt
        </description>
        <flow sarg="c#1"  sink="Encrypt X_B" darg="key">
            <assert confidentiality="true" integrity="true">
                Encryption key must not be chosen or known by an attacker. 
            </assert>
        </flow>
        <flow sarg="c#2"  sink="Decrypt X_B" darg="key">
            <assert confidentiality="true">
                Encryption key must not be known by an attacker, chosing a key
                does not harm confidentiality.
            </assert>
        </flow>
    </branch>

    <branch id="Branch c'">
        <description>
            Branch c' to encrypt/decrypt
        </description>
        <flow sarg="c'#1" sink="Encrypt X_A" darg="key">
            <assert confidentiality="true" integrity="true">
                Encryption key must not be chosen or known by an attacker. 
            </assert>
        </flow>
        <flow sarg="c'#2" sink="Decrypt X_A" darg="key">
            <assert confidentiality="true">
                Encryption key must not be known by an attacker, chosing a key
                does not harm confidentiality.
            </assert>
        </flow>
    </branch>

    <const id="Prefix m1" confidentiality="false">
        <description>
            Prefix b to calculate m1, value 0x02
        </description>
        <config hexbytes="02"/>
        <flow sarg="const" sink="Concat m1" darg="b">
            <assert integrity="true">
                Attacker must not be able to choose prefix used in KDF (FIXME: Why?)
            </assert>
        </flow>
    </const>

    <xform id="Concat m1" code="concat">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash m1" darg="data">
            <assert integrity="true" confidentiality="true">
                Attacker must not learn nor choose secbytes.
            </assert>
        </flow>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash m1">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <config algo="SHA256"/>
        <flow sarg="hash" sink="Branch Hash m1" darg="data">
            <assert integrity="true" confidentiality="true">
                Attacker must not learn nor choose key.
            </assert>
        </flow>
    </hash>

    <branch id="Branch Hash m1">
        <description>
            Branch output arguments
        </description>
        <flow sarg="hash#1" sink="HMAC M_B (S)" darg="key">
            <assert integrity="true" confidentiality="true">
                Attacker must not learn nor choose key.
            </assert>
        </flow>
        <flow sarg="hash#2" sink="HMAC M_B (R)" darg="key">
            <assert integrity="true" confidentiality="true">
                Attacker must not learn nor choose key.
            </assert>
        </flow>
    </branch>

    <const id="Prefix m2" confidentiality="false">
        <description>
            Prefix b to calculate m2, value 0x03
        </description>
        <config hexbytes="03"/>
        <flow sarg="const" sink="Concat m2" darg="b">
            <assert integrity="true">
                Attacker must not be able to to choose prefix used in KDF (FIXME: Why?)
            </assert>
        </flow>
    </const>

    <xform id="Concat m2" code="concat">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash m2" darg="data">
            <assert integrity="true" confidentiality="true">
                Attacker must not learn nor choose secbytes.
            </assert>
        </flow>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash m2">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <config algo="SHA256"/>
        <flow sarg="hash" sink="Branch Hash m2 hash" darg="data">
            <assert integrity="true" confidentiality="true">
                Attacker must not learn nor choose key.
            </assert>
        </flow>
    </hash>

    <branch id="Branch Hash m2 hash">
        <description>
            Branch output arguments
        </description>
        <flow sarg="hash#1" sink="MAC Encrypted X_B" darg="key">
            <assert integrity="true" confidentiality="true">
                Attacker must not learn nor choose key.
            </assert>
        </flow>
        <flow sarg="hash#2" sink="Verify Encrypted X_B" darg="key">
            <assert integrity="true" confidentiality="true">
                Attacker must not learn nor choose key.
            </assert>
        </flow>
    </branch>

    <const id="Prefix m1'" confidentiality="false">
        <description>
            Prefix b to calculate m1', value 0x04
        </description>
        <config hexbytes="04"/>
        <flow sarg="const" sink="Concat m1'" darg="b">
            <assert integrity="true">
                Attacker must not be able to to choose prefix used in KDF (FIXME: Why?)
            </assert>
        </flow>
    </const>

    <xform id="Concat m1'" code="concat">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash m1'" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash m1'">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <config algo="SHA256"/>
        <flow sarg="hash" sink="Branch Hash m1' hash" darg="data"/>
    </hash>

    <branch id="Branch Hash m1' hash">
        <description>
            Branch output arguments
        </description>
        <flow sarg="hash#1" sink="HMAC M_A (R)" darg="key"/>
        <flow sarg="hash#2" sink="HMAC M_A (S)" darg="key"/>
    </branch>

    <const id="Prefix m2'" confidentiality="false">
        <description>
            Prefix b to calculate m2', value 0x05
        </description>
        <config hexbytes="05"/>
        <flow sarg="const" sink="Concat m2'" darg="b">
            <assert integrity="true">
                Attacker must not be able to to choose prefix used in KDF (FIXME: Why?)
            </assert>
        </flow>
    </const>

    <xform id="Concat m2'" code="concat">
        <description>
            Byte b followed by secbytes.
        </description>
        <flow sarg="result" sink="Hash m2'" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Hash m2'">
        <description>
            For a given byte b, define h2(b) to be the 256-bit output of the SHA256
            hash of the (5+len) bytes consisting of the byte b followed by secbytes.
        </description>
        <config algo="SHA256"/>
        <flow sarg="hash" sink="Branch Hash m2' hash" darg="data"/>
    </hash>

    <branch id="Branch Hash m2' hash">
        <description>
            Branch output arguments
        </description>
        <flow sarg="hash#1" sink="Verify Encrypted X_A" darg="key"/>
        <flow sarg="hash#2" sink="MAC Encrypted X_A" darg="key"/>
    </branch>

    <!--
      ** Send D-H Commit message
      -->
    <xform id="D-H Commit (S)" code="concat">
        <description>
            Primitive assembling the first message of the AKE,
            the D-H Commit Message.
        </description>
        <flow sarg="result" sink="Network Mux" darg="dhcm"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="encrypted_g^x_data"/>
        <arg name="hashed_g^x_data"/>
    </xform>

    <const id="DHCM Protocol Version (S)" confidentiality="false">
        <description>
            The version number of the OTR protocol for outgoing D-H Commit messages.
        </description>
        <config uint16="3"/>
        <flow sarg="const" sink="D-H Commit (S)" darg="protocol_version"/>
    </const>

    <const id="DHCM Message Type (S)" confidentiality="false">
        <description>
            The message type of the outgoing D-H Commit messages.
        </description>
        <config uint8="2"/>
        <flow sarg="const" sink="D-H Commit (S)" darg="message_type"/>
    </const>

    <const id="DHCM Sender Instance Tag (S)" confidentiality="false">
        <description>
            The instance tag of the person sending this message.
        </description>
        <!-- FIXME: This should be dynamic in the future -->
        <config uint32="512"/>
        <flow sarg="const" sink="D-H Commit (S)" darg="sender_instance_tag"/>
    </const>

    <const id="DHCM Receiver Instance Tag (S)" confidentiality="false">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <config uint32="0"/>
        <flow sarg="const" sink="D-H Commit (S)" darg="receiver_instance_tag"/>
    </const>

    <const id="Counter for g^x (S)" confidentiality="false">
        <description>
            Counter for encrypting g^x. As the x is random, this is
            always zero.
        </description>
        <config int="0"/>
        <flow sarg="const" sink="Encrypt g^x (S)" darg="ctr"/>
    </const>

    <encrypt id="Encrypt g^x (S)">
        <description>
            Implement a commitment scheme by encrypting the intiators public
            Diffie-Hellman value g^x with a random key r.
        </description>
        <config keylen="128"/>
        <flow sarg="ciphertext" sink="Serialize Encrypted g^x" darg="data"/>
    </encrypt>

    <xform id="Serialize Encrypted g^x" code="data">
        <description>
            Encode encrypted g^x as DATA
        </description>
        <flow sarg="ciphertext" sink="D-H Commit (S)" darg="encrypted_g^x_data"/>
        <arg name="data"/>
    </xform>

    <const id="Length of x (S)" confidentiality="false">
        <description>
            Length of the Diffie-Hellman exponent x.
            At least 320 bits for OTR v3.
        </description>
        <config int="320"/>
        <flow sarg="const" sink="Random x (S)" darg="len">
            <assert integrity="true">
                Secret may be too short if length of key is chosen by attacker
            </assert>
        </flow>
    </const>

    <rng id="Random x (S)">
        <description>
            Random value x used to calcutate Diffie-Hellman public value
            g^x for the initiator.
        </description>
        <flow sarg="data" sink="Branch Random x (S) data" darg="data">
            <assert confidentiality="true" integrity="true">
                If x is chosen or learned by an attacker, she can derive the shared secret. 
            </assert>
        </flow>
    </rng>

    <branch id="Branch Random x (S) data">
        <description>
            Branch output arguments
        </description>
        <flow sarg="data#1" sink="Calculate g^x (S)" darg="psec"/>
        <flow sarg="data#2" sink="Shared secret (R)" darg="psec"/>
        <flow sarg="data#3" sink="Select secret key (M)" darg="initiator_psec"/>
    </branch>

    <dhpub id="Calculate g^x (S)">
        <description>
            Calcutate Diffie-Hellman public value g^x for the initiator.
        </description>
        <flow sarg="pub" sink="Branch Calculate g^x (S) pub" darg="data">
            <assert confidentiality="false">
                No confidentiality, as this is the public D-H value sent over the Internet.
            </assert>
        </flow>
    </dhpub>

    <branch id="Branch Calculate g^x (S) pub">
        <description>
            Branch output arguments
        </description>
        <flow sarg="pub#1" sink="Serialize g^x (S)" darg="data"/>
        <flow sarg="pub#2" sink="Select pubkey (M)" darg="initiator_pub_local"/>
    </branch>

    <xform id="Serialize g^x (S)" code="mpi">
        <description>
            Serialize input g^x as an MPI called gxmpi
            (typically 196 bytes long, starting with
            "\x00\x00\x00\xc0")
        </description>
        <flow sarg="gxmpi#1" sink="Encrypt g^x (S)" darg="plaintext"/>
        <flow sarg="gxmpi#2" sink="Hash g^x (S)" darg="data"/>
        <flow sarg="gxmpi#3" sink="Concat M_B (S)" darg="g^x"/>
        <flow sarg="gxmpi#4" sink="Concat M_A (R)" darg="g^x"/>
        <arg name="data"/>
    </xform>

    <const id="Length of r (S)" confidentiality="false">
        <description>
            Length of the commitment key r. For OTR v3 this is 128 bit (16 bytes).
        </description>
        <config int="16"/>
        <flow sarg="const" sink="Random r (S)" darg="len">
            <assert integrity="true">
                If an attacker can choose the length of r, she can enforce a weak key.
            </assert>
        </flow>
    </const>

    <rng id="Random r (S)">
        <description>
            Random value r used for the commitment scheme.
        </description>
        <flow sarg="data" sink="Branch Random r (S) data" darg="data">
            <assert confidentiality="true" integrity="true">
                If an attacker learns or chooses r, she can break the commitment scheme.
            </assert>
        </flow>
    </rng>

    <branch id="Branch Random r (S) data">
        <description>
            Branch output arguments
        </description>
        <flow sarg="data#1" sink="Encrypt g^x (S)" darg="key"/>
        <flow sarg="data#2" sink="Guard Random r (S)" darg="data"/>
    </branch>

    <guard id="Guard Random r (S)">
        <description>
            Branch output arguments
        </description>
        <flow sarg="data" sink="Serialize r (S)" darg="data"/>
    </guard>

    <xform id="Serialize r (S)" code="serialize">
        <description>
            Serialize key r
        </description>
        <flow sarg="data" sink="Release Random r (S)" darg="data"/>
        <arg name="data"/>
    </xform>

    <release id="Release Random r (S)">
        <description>
            The peers g^y was received. Release the formerly confidential
            value r to open the commitment.
        </description>
        <flow sarg="data" sink="Reveal Signature (S)" darg="revealed_key"/>
    </release>

    <hash id="Hash g^x (S)">
        <description>
            SHA256 hash of the encoded gxmpi value.
        </description>
        <config algo="SHA256"/>
        <flow sarg="hash" sink="Serialize hashed g^x" darg="data"/>
    </hash>

    <xform id="Serialize hashed g^x" code="data">
        <description>
            Encode hashed g^x as DATA.
        </description>
        <flow sarg="hash" sink="D-H Commit (S)" darg="hashed_g^x_data"/>
        <arg name="data"/>
    </xform>

    <!--
      ** Receive D-H Commit message
      -->
    <xform id="D-H Commit (R)" code="dh_commit_r">
        <description>
            First message of the AKE received by peer in the responder case.
        </description>
        <flow sarg="encrypted_g^x" sink="Decrypt g^x" darg="ciphertext"/>
        <flow sarg="hashed_g^x" sink="Verify g^x (R)" darg="hash"/>
        <arg name="dhcm"/>
    </xform>

    <!--
      ** Send D-H Key message
      -->
    <xform id="D-H Key (S)" code="concat">
        <description>
            Second message of the AKE send by us in the responder case.
        </description>
        <flow sarg="result" sink="Network Mux" darg="dhkm"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="g^y"/>
    </xform>

    <const id="DHKM Protocol Version (S)" confidentiality="false">
        <description>
            The version number of the OTR protocol for outgoing D-H Commit messages.
        </description>
        <config uint16="3"/>
        <flow sarg="const" sink="D-H Key (S)" darg="protocol_version"/>
    </const>

    <const id="DHKM Message Type (S)" confidentiality="false">
        <description>
            The message type of the outgoing D-H Commit messages.
        </description>
        <config uint8="2"/>
        <flow sarg="const" sink="D-H Key (S)" darg="message_type"/>
    </const>

    <const id="DHKM Sender Instance Tag (S)" confidentiality="false">
        <description>
            The instance tag of the person sending this message.
        </description>
        <!-- FIXME: This should be dynamic in the future! -->
        <config uint32="512"/>
        <flow sarg="const" sink="D-H Key (S)" darg="sender_instance_tag"/>
    </const>

    <const id="DHKM Receiver Instance Tag (S)" confidentiality="false">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <!-- FIXME: This should be dynamic in the future! -->
        <config uint32="0"/>
        <flow sarg="const" sink="D-H Key (S)" darg="receiver_instance_tag"/>
    </const>

    <const id="Length of y (S)" confidentiality="false">
        <description>
            Length of the Diffie-Hellman exponent y.
            At least 320 bits for OTR v3.
        </description>
        <config int="320"/>
        <flow sarg="const" sink="Random y (S)" darg="len">
            <assert integrity="true">
                Secret may be too short if length of key is chosen by attacker
            </assert>
        </flow>
    </const>

    <rng id="Random y (S)">
        <description>
            Random value y used to calcutate Diffie-Hellman public value
            g^y for the responder.
        </description>
        <flow sarg="data" sink="Branch Random y (S) data" darg="data">
            <assert confidentiality="true" integrity="true">
                If y is chosen or learned by an attacker, she can derive the shared secret. 
            </assert>
        </flow>
    </rng>

    <branch id="Branch Random y (S) data">
        <description>
            Branch output arguments
        </description>
        <flow sarg="data#1" sink="Calculate g^y (S)" darg="psec"/>
        <flow sarg="data#2" sink="Shared secret (S)" darg="psec"/>
        <flow sarg="data#3" sink="Select secret key (M)" darg="responder_psec"/>
    </branch>

    <dhpub id="Calculate g^y (S)">
        <description>
            Calcutate Diffie-Hellman public value g^y for the responder.
        </description>
        <flow sarg="pub" sink="Branch Calculate g^y (S) pub" darg="data">
            <assert confidentiality="false">
                Public value sent over the Internet must not be confidential.
            </assert>
        </flow>
    </dhpub>

    <branch id="Branch Calculate g^y (S) pub">
        <description>
            Branch output arguments
        </description>
        <flow sarg="pub#1" sink="Serialize g^y (S)" darg="data"/>
        <flow sarg="pub#2" sink="Select pubkey (M)" darg="responder_pub_local"/>
    </branch>

    <xform id="Serialize g^y (S)" code="mpi">
        <description>
            Serialize input g^y as an MPI called gxmpi
            (typically 196 bytes long, starting with
            "\x00\x00\x00\xc0")
        </description>
        <flow sarg="gympi#1" sink="D-H Key (S)" darg="g^y"/>
        <flow sarg="gympi#2" sink="Concat M_A (S)" darg="g^y"/>
        <flow sarg="gympi#3" sink="Concat M_B (R)" darg="g^y"/>
        <arg name="data"/>
    </xform>

    <!--
      ** Receive D-H Key message
      -->
    <xform id="D-H Key (R)" code="dh_key_r">
        <description>
            Second message of the AKE. It simply consists of Alice's D-H encryption key.
        </description>
        <flow sarg="g^y" sink="Latch g^y (R)" darg="data"/>
        <arg name="dhkm"/>
    </xform>

    <latch id="Latch g^y (R)">
        <description>
            Make sure we receive g^y exactly one and stick to it. The trigger
            guards our Reveal Signature response, i.e. it is sent only when
            g^y was received in a D-H Key message.
        </description>
        <flow sarg="data" sink="Branch g^y (R)" darg="data"/>
        <flow sarg="trigger" sink="Guard Random r (S)" darg="cond"/>
    </latch>

    <branch id="Branch g^y (R)">
        <description>
            Branch g^y
        </description>
        <flow sarg="g^y#1" sink="Unserialize g^y (R)" darg="data"/>
        <flow sarg="g^y#2" sink="Concat M_B (S)" darg="g^y"/>
        <flow sarg="g^y#3" sink="Concat M_A (R)" darg="g^y"/>
        <flow sarg="g^y#4" sink="Select pubkey (M)" darg="responder_pub_remote"/>
    </branch>

    <xform id="Unserialize g^y (R)" code="unmpi">
        <description>
            Convert MPI to long integer.
        </description>
        <flow sarg="data" sink="Shared secret (R)" darg="pub"/>
        <arg name="data"/>
    </xform>

    <const id="Modulus" confidentiality="false">
        <description>
            Modulus for D-H operations
        </description>
        <config hex="FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF"/>
        <flow sarg="const" sink="Branch modulus" darg="data"/>
    </const>

    <branch id="Branch modulus">
        <description>
            Branch modulus
        </description>
        <flow sarg="modulus#1" sink="Shared secret (R)" darg="modulus"/>
        <flow sarg="modulus#2" sink="Shared secret (S)" darg="modulus"/>
        <flow sarg="modulus#3" sink="Shared secret (M)" darg="modulus"/>
        <flow sarg="modulus#4" sink="Calculate next D-H key (M)" darg="modulus"/>
        <flow sarg="modulus#5" sink="Calculate g^x (S)" darg="modulus"/>
        <flow sarg="modulus#6" sink="Calculate g^y (S)" darg="modulus"/>
    </branch>

    <const id="Generator" confidentiality="false">
        <description>
            Generator for D-H operations
        </description>
        <config int="2"/>
        <flow sarg="const" sink="Branch generator" darg="data"/>
    </const>

    <branch id="Branch generator">
        <description>
            Branch generator
        </description>
        <flow sarg="generator#1" sink="Shared secret (R)" darg="generator"/>
        <flow sarg="generator#2" sink="Shared secret (S)" darg="generator"/>
        <flow sarg="generator#3" sink="Shared secret (M)" darg="generator"/>
        <flow sarg="generator#4" sink="Calculate next D-H key (M)" darg="generator"/>
        <flow sarg="generator#5" sink="Calculate g^x (S)" darg="generator"/>
        <flow sarg="generator#6" sink="Calculate g^y (S)" darg="generator"/>
    </branch>

    <dhsec id="Shared secret (R)">
        <description>
            Check that g^x is a legal value, i.e. 2 \le g^x \le modulus-2, then
            compute the Diffie-Hellman shared secret s in the intitiator case.
        </description>
        <flow sarg="ssec" sink="Derive keys" darg="initiator_ssec">
            <assert confidentiality="true">
                Shared secret.
            </assert>
        </flow>
    </dhsec>

    <!--
      ** Send Signature message
      -->
    <xform id="Signature (S)" code="concat">
        <description>
            This is the final message of the AKE. Alice sends it to Bob,
            authenticating herself and the channel parameters to him.
        </description>
        <flow sarg="result" sink="Guard Signature (S)" darg="data"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="encrypted_signature"/>
        <arg name="macd_signature"/>
    </xform>

    <guard id="Guard Signature (S)">
        <description>
            Only send a Signature message once the reveal signature message
            was verified correctly.
        </description>
        <flow sarg="data" sink="Network Mux" darg="sigm"/>
    </guard>

    <const id="SIGM Protocol Version (S)" confidentiality="false">
        <description>
            The version number of the OTR protocol for outgoing Reveal Signature messages.
        </description>
        <config uint16="3"/>
        <flow sarg="const" sink="Signature (S)" darg="protocol_version"/>
    </const>

    <const id="SIGM Message Type (S)" confidentiality="false">
        <description>
            The message type of the outgoing Reveal Signature messages.
        </description>
        <config uint8="18"/>
        <flow sarg="const" sink="Signature (S)" darg="message_type"/>
    </const>

    <const id="SIGM Sender Instance Tag (S)" confidentiality="false">
        <description>
            The instance tag of the person sending this message.
        </description>
        <config uint32="512"/>
        <flow sarg="const" sink="Signature (S)" darg="sender_instance_tag"/>
    </const>

    <const id="SIGM Receiver Instance Tag (S)" confidentiality="false">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <config uint32="0"/>
        <flow sarg="const" sink="Signature (S)" darg="receiver_instance_tag"/>
    </const>

    <const id="keyid A" confidentiality="false">
        <description>
            Select keyid, a serial number for the D-H key computed earlier.
            It is an INT, and must be greater than 0.
        </description>
        <config int="1"/>
        <flow sarg="const" sink="Branch keyid A const" darg="data"/>
    </const>

    <branch id="Branch keyid A const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Concat M_A (S)" darg="keyid"/>
        <flow sarg="const#2" sink="Concat X_A" darg="keyid"/>
    </branch>

    <xform id="Concat M_A (S)" code="concat">
        <description>
            Compute the 32-byte value M_A to be the SHA256-HMAC of the following
            data, using the key m1': g^y (MPI), g^x (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="result" sink="HMAC M_A (S)" darg="msg"/>
        <arg name="g^y"/>
        <arg name="g^x" controlled="true"/>
        <arg name="pub"/>
        <arg name="keyid"/>
    </xform>

    <hmac id="HMAC M_A (S)">
        <description>
            Compute the 32-byte value M_A to be the SHA256-HMAC of the following
            data, using the key m1': g^y (MPI), g^x (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="auth" sink="Sign M_A" darg="msg"/>
    </hmac>

    <rng id="Per message key M_A">
        <description>
            Per-message key k used for signing M_A
        </description>
        <flow sarg="data" sink="Sign M_A" darg="rand"/>
    </rng>

    <sign id="Sign M_A">
        <description>
            This is the signature, using the private part of the key pub, of the
            32-byte MB (which does not need to be hashed again to produce the signature).
        </description>
        <flow sarg="auth" sink="Concat X_A" darg="Signed M_A"/>
    </sign>

    <xform id="Concat X_A" code="concat">
        <description>
            Let X_A be the following structure: pub (PUBKEY), keyid (INT), sig_A(M_A) (SIG)
        </description>
        <flow sarg="result" sink="Encrypt X_A" darg="plaintext"/>
        <arg name="pub"/>
        <arg name="keyid"/>
        <arg name="Signed M_A"/>
    </xform>

    <const id="Counter for X_A" confidentiality="false">
        <description>
            Counter for encrypting X_A. Initial counter value 0.
        </description>
        <config int="0"/>
        <flow sarg="const" sink="Encrypt X_A" darg="ctr"/>
    </const>

    <encrypt id="Encrypt X_A">
        <description>
            Encrypt X_A using AES128-CTR with key c and initial counter value 0.
        </description>
        <config keylen="128"/>
        <flow sarg="ciphertext" sink="Branch Encrypt X_A ciphertext" darg="data"/>
    </encrypt>

    <branch id="Branch Encrypt X_A ciphertext">
        <description>
            Branch output arguments
        </description>
        <flow sarg="ciphertext#1" sink="Signature (S)" darg="encrypted_signature"/>
        <flow sarg="ciphertext#2" sink="MAC Encrypted X_A" darg="msg"/>
    </branch>

    <!-- FIXME: Add DATA/MAC etc. encoding -->
    <hmac id="MAC Encrypted X_A">
        <description>
            The SHA256-HMAC of the encrypted signature field, using the key m2'.
        </description>
        <flow sarg="auth" sink="Trim X_A" darg="macd_signature"/>
    </hmac>

    <xform id="Trim X_A" code="prefix">
        <description>
            This is the SHA256-HMAC-160 (that is, the first 160 bits of the SHA256-HMAC)
            of the encrypted signature field.
        </description>
        <config length_in_bits="160"/>
        <flow sarg="macd_signature" sink="Signature (S)" darg="macd_signature"/>
        <arg name="data"/>
    </xform>

    <!--
      ** Receive Signature message
      -->
    <xform id="Signature (R)" code="signature_r">
        <description>
            This is the final message of the AKE. Alice sends it to Bob,
            authenticating herself and the channel parameters to him.
        </description>
        <flow sarg="encrypted_signature#1" sink="Decrypt X_A" darg="ciphertext"/>
        <flow sarg="encrypted_signature#2" sink="Verify Encrypted X_A" darg="msg"/>
        <flow sarg="macd_signature" sink="Verify Encrypted X_A" darg="auth"/>
        <arg name="sigm"/>
    </xform>

    <verify_hmac id="Verify Encrypted X_A">
        <description>
            Check the SHA256-HMAC-160 authenticator for the encrypted signature.
        </description>
        <flow sarg="result" sink="Guard Encrypted X_A" darg="cond"/>
    </verify_hmac>

    <guard id="Guard Encrypted X_A">
        <description>
            Signal encrypted state only if the HMAC was correct.
        </description>
        <flow sarg="data" sink="Guard Signed M_A" darg="data"/>
    </guard>

    <const id="Counter for X_A Decryption" confidentiality="false">
        <description>
            Counter for decrypting X_A. Initial value is 0.
        </description>
        <config int="0"/>
        <flow sarg="const" sink="Decrypt X_A" darg="ctr"/>
    </const>

    <decrypt id="Decrypt X_A">
        <description>
            Decrypt X_A received in Signature Message using
            AES128-CTR with key c' and initial counter value 0.
        </description>
        <config keylen="128"/>
        <flow sarg="plaintext" sink="Split X_A" darg="data"/>
    </decrypt>

    <xform id="Split X_A" code="split_x">
        <description>
            Split X_A into pub, keyid, sig_A(M_A)
        </description>
        <flow sarg="pub#1" sink="Verify Sig M_A (R)" darg="pubkey"/>
        <flow sarg="pub#2" sink="Concat M_A (R)" darg="pub"/>
        <flow sarg="signature" sink="Verify Sig M_A (R)" darg="auth"/>
        <flow sarg="keyid" sink="Concat M_A (R)" darg="keyid"/>
        <arg name="data"/>
    </xform>

    <xform id="Concat M_A (R)" code="concat">
        <description>
            Compute the 32-byte value M_A to be the SHA256-HMAC of the following
            data, using the key m1': g^y (MPI), g^x (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="result" sink="HMAC M_A (R)" darg="msg"/>
        <arg name="g^y" controlled="true"/>
        <arg name="g^x"/>
        <arg name="pub"/>
        <arg name="keyid"/>
    </xform>

    <hmac id="HMAC M_A (R)">
        <description>
            Compute the 32-byte value M_A to be the SHA256-HMAC of the following
            data, using the key m1: g^y (MPI), g^x (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="auth" sink="Verify Sig M_A (R)" darg="msg"/>
    </hmac>

    <verify_sig id="Verify Sig M_A (R)">
        <description>
            Verify the signature of M_A send by responder Reveal Signature message.
        </description>
        <flow sarg="result" sink="Guard Signed M_A" darg="cond"/>
    </verify_sig>

    <guard id="Guard Signed M_A">
        <description>
            Only signal MSGSTATE_ENCRYPTED (passed on from Guard Encrypted X_A)
            if the signature of M_A was correct.
        </description>
        <flow sarg="data" sink="AKE State" darg="initiator_state"/>
    </guard>

    <!--
      ** Send Reveal Signature Message
      -->
    <xform id="Reveal Signature (S)" code="concat">
        <description>
            Primitive assembling the third message of the AKE,
            the Reveal Signature Message. It reveals the D-H
            encryption key, thuse establishing and authenticating
            the encrypted channel.
        </description>
        <flow sarg="result" sink="Network Mux" darg="rvsm"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="revealed_key"/>
        <arg name="encrypted_signature"/>
        <arg name="macd_signature"/>
    </xform>

    <const id="RVSM Protocol Version (S)" confidentiality="false">
        <description>
            The version number of the OTR protocol for outgoing Reveal Signature messages.
        </description>
        <config uint16="3"/>
        <flow sarg="const" sink="Reveal Signature (S)" darg="protocol_version"/>
    </const>

    <const id="RVSM Message Type (S)" confidentiality="false">
        <description>
            The message type of the outgoing Reveal Signature messages.
        </description>
        <config uint8="17"/>
        <flow sarg="const" sink="Reveal Signature (S)" darg="message_type"/>
    </const>

    <const id="RVSM Sender Instance Tag (S)" confidentiality="false">
        <description>
            The instance tag of the person sending this message.
        </description>
        <config uint32="512"/>
        <flow sarg="const" sink="Reveal Signature (S)" darg="sender_instance_tag"/>
    </const>

    <const id="keyid B" confidentiality="false">
        <description>
            Select keyid, a serial number for the D-H key computed earlier.
            It is an INT, and must be greater than 0.
        </description>
        <config int="1"/>
        <flow sarg="const" sink="Branch keyid B keyid" darg="data"/>
    </const>

    <branch id="Branch keyid B keyid">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Concat M_B (S)" darg="keyid"/>
        <flow sarg="const#2" sink="Concat X_B" darg="keyid"/>
    </branch>

    <xform id="Concat M_B (S)" code="concat">
        <description>
            Compute the 32-byte value M_B to be the SHA256-HMAC of the following
            data, using the key m1: g^x (MPI), g^y (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="result" sink="HMAC M_B (S)" darg="msg"/>
        <arg name="g^x"/>
        <arg name="g^y" controlled="true"/>
        <arg name="pub"/>
        <arg name="keyid"/>
    </xform>

    <hmac id="HMAC M_B (S)">
        <description>
            Compute the 32-byte value M_B to be the SHA256-HMAC of the following
            data, using the key m1: g^x (MPI), g^y (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="auth" sink="Sign M_B" darg="msg"/>
    </hmac>

    <const id="DSA keylen" confidentiality="false">
        <description>
            Length of DSA per-message keys
        </description>
        <config int="20"/>
        <flow sarg="const" sink="Branch DSA keylen" darg="data"/>
    </const>

    <branch id="Branch DSA keylen">
        <description>
            Branch length of per-message keys
        </description>
        <flow sarg="data#1" sink="Per message key M_A" darg="len"/>
        <flow sarg="data#2" sink="Per message key M_B" darg="len"/>
    </branch>

    <rng id="Per message key M_B">
        <description>
            Per-message key k used for signing M_B
        </description>
        <flow sarg="data" sink="Sign M_B" darg="rand"/>
    </rng>

    <sign id="Sign M_B">
        <description>
            This is the signature, using the private part of the key pub, of the
            32-byte M_B (which does not need to be hashed again to produce the signature).
        </description>
        <flow sarg="auth" sink="Concat X_B" darg="Signed M_B"/>
    </sign>

    <xform id="Concat X_B" code="concat">
        <description>
            Let X_B be the following structure: pub (PUBKEY), keyid (INT), sig_B(M_B) (SIG)
        </description>
        <flow sarg="result" sink="Encrypt X_B" darg="plaintext"/>
        <arg name="pub"/>
        <arg name="keyid"/>
        <arg name="Signed M_B"/>
    </xform>

    <const id="Counter for X_B" confidentiality="false">
        <description>
            Counter for encrypting X_B. Initial counter value 0.
        </description>
        <config int="0"/>
        <flow sarg="const" sink="Encrypt X_B" darg="ctr"/>
    </const>

    <encrypt id="Encrypt X_B">
        <description>
            Encrypt X_B using AES128-CTR with key c and initial counter value 0.
        </description>
        <config keylen="128"/>
        <flow sarg="ciphertext" sink="Branch Encrypt X_B ciphertext" darg="data"/>
    </encrypt>

    <branch id="Branch Encrypt X_B ciphertext">
        <description>
            Branch output arguments
        </description>
        <flow sarg="ciphertext#1" sink="Serialize X_B ciphertext" darg="data"/>
        <flow sarg="ciphertext#2" sink="MAC Encrypted X_B" darg="msg"/>
    </branch>

    <xform id="Serialize X_B ciphertext" code="serialize">
        <description>
            Seialize encrypted X_B
        </description>
        <flow sarg="data" sink="Reveal Signature (S)" darg="encrypted_signature"/>
        <arg name="data"/>
    </xform>

    <!-- FIXME: Add DATA/MAC etc. encoding -->
    <hmac id="MAC Encrypted X_B">
        <description>
            The SHA256-HMAC of the encrypted signature field, using the key m2.
        </description>
        <flow sarg="auth" sink="Trim X_B" darg="data"/>
    </hmac>

    <xform id="Trim X_B" code="prefix">
        <description>
            This is the SHA256-HMAC-160 (that is, the first 160 bits of the SHA256-HMAC)
            of the encrypted signature field.
        </description>
        <config length_in_bits="160"/>
        <flow sarg="macd_signature" sink="Reveal Signature (S)" darg="macd_signature"/>
        <arg name="data"/>
    </xform>

    <!--
      ** Receive Reveal Signature Message
      -->
    <xform id="Reveal Signature (R)" code="reveal_signature_r">
        <description>
            Primitive assembling the third message of the AKE,
            the Reveal Signature Message. It reveals the D-H
            encryption key, thuse establishing and authenticating
            the encrypted channel.
        </description>
        <flow sarg="revealed_key" sink="Decrypt g^x" darg="key"/>
        <flow sarg="encrypted_signature#1" sink="Decrypt X_B" darg="ciphertext"/>
        <flow sarg="encrypted_signature#2" sink="Verify Encrypted X_B" darg="msg"/>
        <flow sarg="macd_signature" sink="Verify Encrypted X_B" darg="auth"/>
        <arg name="rvsm"/>
    </xform>

    <const id="Counter for g^x (R)" confidentiality="false">
        <description>
            Counter for decrypting g^x. This is always zero.
        </description>
        <config int="0"/>
        <flow sarg="const" sink="Decrypt g^x" darg="ctr"/>
    </const>

    <decrypt id="Decrypt g^x">
        <description>
            Use the received value of r to decrypt the value of g^x
            received in the D-H Commit Message
        </description>
        <config keylen="128"/>
        <flow sarg="plaintext" sink="Branch Decrypt g^x plaintext" darg="data"/>
    </decrypt>

    <branch id="Branch Decrypt g^x plaintext">
        <description>
            Branch output arguments
        </description>
        <flow sarg="plaintext#1" sink="Verify g^x (R)" darg="data"/>
        <flow sarg="plaintext#2" sink="Shared secret (S)" darg="pub"/>
        <flow sarg="plaintext#3" sink="Select pubkey (M)" darg="initiator_pub_remote"/>
    </branch>


    <verify_commit id="Verify g^x (R)">
        <description>
            Check that the hash of decrypted g^x matches the value of the
            hashed g^x sent in D-H Commit message.
        </description>
        <config algo="SHA256"/>
        <flow sarg="data" sink="Branch Verify g^x (R) data" darg="data"/>
    </verify_commit>

    <branch id="Branch Verify g^x (R) data">
        <description>
            Branch output arguments
        </description>
        <flow sarg="data#1" sink="Concat M_B (R)" darg="g^x"/>
        <flow sarg="data#2" sink="Concat M_A (S)" darg="g^x"/>
    </branch>

    <verify_hmac id="Verify Encrypted X_B">
        <description>
            Check the SHA256-HMAC-160 authenticator for the encrypted signature.
        </description>
        <flow sarg="result" sink="Guard Encrypted X_B" darg="cond"/>
    </verify_hmac>

    <guard id="Guard Encrypted X_B">
        <description>
            Allow Signature Message if the HMAC was correct.
        </description>
        <flow sarg="data" sink="Guard Signed M_B" darg="data"/>
    </guard>

    <const id="Counter for X_B Decryption" confidentiality="false">
        <description>
            Counter for decrypting X_B. Initial value is 0.
        </description>
        <config int="0"/>
        <flow sarg="const" sink="Decrypt X_B" darg="ctr"/>
    </const>

    <decrypt id="Decrypt X_B">
        <description>
            Decrypt X_B received in Reveal Signature Message using
            AES128-CTR with key c and initial counter value 0.
        </description>
        <config keylen="128"/>
        <flow sarg="plaintext" sink="Split X_B (R)" darg="data"/>
    </decrypt>

    <xform id="Split X_B (R)" code="split_x">
        <description>
            Split X_B into pub, keyid, sig_B(M_B)
        </description>
        <flow sarg="pub#1" sink="Concat M_B (R)" darg="pub"/>
        <flow sarg="pub#2" sink="Verify Sig M_B" darg="pubkey"/>
        <flow sarg="keyid" sink="Concat M_B (R)" darg="keyid"/>
        <flow sarg="signature" sink="Verify Sig M_B" darg="auth"/>
        <arg name="data"/>
    </xform>

    <xform id="Concat M_B (R)" code="concat">
        <description>
            Compute the 32-byte value MB to be the SHA256-HMAC of the following
            data, using the key m1: g^x (MPI), g^y (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="result" sink="HMAC M_B (R)" darg="msg"/>
        <arg name="g^x"/>
        <arg name="g^y"/>
        <arg name="pub"/>
        <arg name="keyid"/>
    </xform>

    <hmac id="HMAC M_B (R)">
        <description>
            Compute the 32-byte value M_B to be the SHA256-HMAC of the following
            data, using the key m1: g^x (MPI), g^y (MPI), pub (PUBKEY), keyid (INT)
        </description>
        <flow sarg="auth" sink="Verify Sig M_B" darg="msg"/>
    </hmac>

    <verify_sig id="Verify Sig M_B">
        <description>
            Verify the signature of M_B send by initiator in Reveal Signature message.
        </description>
        <flow sarg="result" sink="Guard Signed M_B" darg="cond"/>
    </verify_sig>

    <guard id="Guard Signed M_B">
        <description>
            Only signal MSGSTATE_ENCRYPTED (passed on from Guard Encrypted X_B)
            if the signature of M_B was correct.
        </description>
        <flow sarg="data" sink="AKE State" darg="responder_state"/>
    </guard>

    <dhsec id="Shared secret (S)">
        <description>
            Check that g^x is a legal value, i.e. 2 \le g^x \le modulus-2, then
            compute the Diffie-Hellman shared secret s in the responder case.
        </description>
        <flow sarg="ssec" sink="Derive keys" darg="responder_ssec"/>
    </dhsec>

    <!--
      ** Message encryption
      -->

    <!-- Key management -->

    <xform id="Select pubkey (M)" code="select_pubkeys">
        <description>
            Picks the most recent D-H encryption key received from the remote
            party, either in a Data Message or in the AKE.

            Picks the most recent local D-H encryption key remote side
            has acknowledged receiving by using it in a Data Message
            or, failing that, in the AKE.

            The sender determines if she is the "low" end or the "high" end
            of this Data Message. If the senders public key is numerically
            greater than the receivers public key, then she is the "high"
            end. Otherwise, she is the "low" end.
        </description>

        <flow sarg="current_pubkey" sink="Shared secret (M)" darg="pub"/>

        <flow sarg="local_keyid#1" sink="Data (S)" darg="sender_keyid"/>
        <flow sarg="local_keyid#2" sink="Concat authenticator (S)" darg="sender_keyid"/>
        <flow sarg="local_keyid#3" sink="Select secret key (M)" darg="current_keyid"/>

        <flow sarg="sendbyte" sink="Concat sendkey (M)" darg="b"/>
        <flow sarg="recvbyte" sink="Concat recvkey (M)" darg="b"/>

        <arg name="initiator_pub_local"/>
        <arg name="responder_pub_local"/>
        <arg name="pub_local"/>

        <arg name="initiator_pub_remote" controlled="true"/>
        <arg name="responder_pub_remote" controlled="true"/>
        <arg name="pub_remote" controlled="true"/>

        <arg name="latest_remote_keyid" controlled="true"/>
        <arg name="latest_local_keyid" controlled="true"/>
    </xform>

    <const id="Length of y (M)" confidentiality="false">
        <description>
            Lenght of the Diffie-Hellmen exponent y.
            At least 320 bits for OTR v3.
        </description>
        <config int="320"/>
        <flow sarg="const" sink="Random y (M)" darg="len">
            <assert integrity="true">
                Secret may be too short if length of key is chosen by attacker
            </assert>
        </flow>
    </const>

    <rng id="Random y (M)">
        <description>
            Random value y used to calcutate Diffie-Hellman public value
            g^y for the next data message.
        </description>
        <flow sarg="data" sink="Branch Random y (M) data" darg="data">
            <assert confidentiality="true" integrity="true">
                Private key must be confidential and must not be chosen
                by attacker.
            </assert>
        </flow>
    </rng>

    <branch id="Branch Random y (M) data">
        <description>
            Branch output arguments
        </description>
        <flow sarg="data#1" sink="Calculate next D-H key (M)" darg="psec"/>
        <flow sarg="data#2" sink="Select secret key (M)" darg="data_psec"/>
    </branch>

    <dhpub id="Calculate next D-H key (M)">
        <description>
            Diffie-Hellman public value g^y for the next data message.
        </description>
        <flow sarg="pub" sink="Branch Calculate next D-H key (M) pub" darg="data"/>
    </dhpub>

    <branch id="Branch Calculate next D-H key (M) pub">
        <description>
            Branch output arguments
        </description>
        <flow sarg="pub#1" sink="Serialize g^y (M)" darg="data"/>
        <flow sarg="pub#2" sink="Select pubkey (M)" darg="pub_local"/>
    </branch>
    
    <xform id="Serialize g^y (M)" code="mpi">
        <description>
            Serialize Diffie-Hellman public value as MPI
        </description>
        <flow sarg="mpi#1" sink="Data (S)" darg="dh_y"/>
        <flow sarg="mpi#2" sink="Concat authenticator (S)" darg="dh_y"/>
        <arg name="data"/>
    </xform>

    <xform id="Select secret key (M)" code="select_secret_key">
        <!-- FIXME: If the "recipient keyid" in the Data message equals
         our_keyid, then he's seen the public part of our most recent DH key
         pair, so you must securely forget our_dh[our_keyid-1], increment
         our_keyid, and set our_dh[our_keyid] to a new DH key pair which you
         generate. -->
        <description>
            Select the shared secret for the next message to be either
            the result of AKE or the result of a subsequent DH exchange
            using previous dh_y contained in a data message.
        </description>
        <flow sarg="data" sink="Shared secret (M)" darg="psec"/>
        <arg name="data_psec"/>
        <arg name="initiator_psec"/>
        <arg name="responder_psec"/>
        <arg name="current_keyid" controlled="true"/>
    </xform>

    <dhsec id="Shared secret (M)">
        <description>
            Check that g^x is a legal value, i.e. 2 \le g^x \le modulus-2, then
            calculate DH shared secret s for data message.
        </description>
        <flow sarg="ssec" sink="Serialize s (M)" darg="data"/>
    </dhsec>

    <xform id="Serialize s (M)" code="mpi">
        <description>
            Serialize shared secret as MPI
        </description>
        <flow sarg="secbytes#1" sink="Concat sendkey (M)" darg="secbytes"/>
        <flow sarg="secbytes#2" sink="Concat recvkey (M)" darg="secbytes"/>
        <arg name="data"/>
    </xform>

    <!-- Sending a data message to the network -->

    <xform id="Concat sendkey (M)" code="concat">
        <description>
            Byte b, followed by secbytes.
        </description>
        <flow sarg="result" sink="Derive sending enc key (M)" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Derive sending enc key (M)">
        <description>
            The 160-bit output of the SHA-1 hash of the (5+len)
            bytes consisting of the byte b, followed by secbytes
        </description>
        <config algo="SHA"/>
        <flow sarg="hash" sink="Truncate sending enc key (M)" darg="data"/>
    </hash>

    <xform id="Truncate sending enc key (M)" code="prefix">
        <description>
            The first 16 bytes of h1(sendbyte)
        </description>
        <config length_in_bits="128"/>
        <flow sarg="data#1" sink="Derive sending MAC key (M)" darg="data"/>
        <flow sarg="data#2" sink="Encrypt (M)" darg="key"/>
        <arg name="data"/>
    </xform>

    <hash id="Derive sending MAC key (M)">
        <description>
            The 20-byte SHA-1 hash of the 16-byte sending AES key.
        </description>
        <config algo="SHA"/>
        <flow sarg="hash" sink="Calculate authenticator (M)" darg="key"/>
    </hash>

    <!-- FIXME: Where is guaranteed that this is not used for MACing message anymore -->
    <xform id="Reveal old MAC keys (M)" code="reveal_old_mac_keys">
        <description>
            Whenever you are about to forget either one of your old D-H key pairs,
            or one of your correspondent's old D-H public keys, take all of the
            receiving MAC keys that were generated by that key and put them into the
            "Old MAC keys to be revealed" section of the next Data Message you send.
        </description>
        <flow sarg="key" sink="Release MAC key (M)" darg="data"/>
        <arg name="key"/>
    </xform>

    <release id="Release MAC key (M)">
        <description>
            Release receiving MAC keys for old D-H keys.
        </description>
        <flow sarg="data" sink="Data (S)" darg="old_mac_keys"/>
    </release>

    <const id="Initial counter (M)" confidentiality="false">
        <description>
            Initial value for counter to encrypt data message. Must not be 0.
        </description>
        <config int="0"/>
        <flow sarg="const" sink="Encrypt (M)" darg="ctr"/>
    </const>

    <encrypt_ctr id="Encrypt (M)">
        <description>
            Perform AES128 counter-mode encryption of the message using
            the most recent D-H encryption keys.
        </description>
        <config keylen="128"/>
        <flow sarg="ciphertext" sink="Branch Encrypt (M) ciphertext" darg="data"/>
        <flow sarg="ctr" sink="Branch Counter (M) ctr" darg="data"/>
    </encrypt_ctr>

    <branch id="Branch Counter (M) ctr">
        <description>
            Branch output arguments
        </description>
        <flow sarg="ctr#1" sink="Data (S)" darg="top_half_of_counter_init"/>
        <flow sarg="ctr#2" sink="Concat authenticator (S)" darg="top_half_of_counter_init"/>
    </branch>

    <branch id="Branch Encrypt (M) ciphertext">
        <description>
            Branch output arguments
        </description>
        <flow sarg="ciphertext#1" sink="Data (S)" darg="encrypted_message"/>
        <flow sarg="ciphertext#2" sink="Concat authenticator (S)" darg="encrypted_message"/>
    </branch>

    <xform id="Concat authenticator (S)" code="concat">
        <description>
            Input for the authenticator to MAC outgoing messages.
        </description>
        <flow sarg="result" sink="Calculate authenticator (M)" darg="msg"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="flags"/>
        <arg name="sender_keyid"/>
        <arg name="recipient_keyid"/>
        <arg name="dh_y"/>
        <arg name="top_half_of_counter_init"/>
        <arg name="encrypted_message"/>
    </xform>

    <hmac id="Calculate authenticator (M)">
        <description>
            The SHA1-HMAC, using the appropriate MAC key of everything from
            the Protocol version to the end of the encrypted message.
        </description>
        <flow sarg="auth" sink="Data (S)" darg="authenticator"/>
    </hmac>

    <const id="Data Protocol Version (M)" confidentiality="false">
        <description>
            The version number of the OTR protocol for outgoing D-H Commit messages.
        </description>
        <config uint16="3"/>
        <flow sarg="const" sink="Branch Data Protocol Version (M) const" darg="data"/>
    </const>

    <branch id="Branch Data Protocol Version (M) const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Data (S)" darg="protocol_version"/>
        <flow sarg="const#2" sink="Concat authenticator (S)" darg="protocol_version"/>
    </branch>

    <const id="Data Message Type (M)" confidentiality="false">
        <description>
            The message type of the outgoing D-H Commit messages.
        </description>
        <config uint8="3"/>
        <flow sarg="const" sink="Branch Data Message Type (M) const" darg="data"/>
    </const>

    <branch id="Branch Data Message Type (M) const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Data (S)" darg="message_type"/>
        <flow sarg="const#2" sink="Concat authenticator (S)" darg="message_type"/>
    </branch>

    <const id="Data Sender Instance Tag (M)" confidentiality="false">
        <description>
            The instance tag of the person sending this message.
        </description>
        <config uint32="42"/>
        <flow sarg="const" sink="Branch Data Sender Instance Tag (M) const" darg="data"/>
    </const>

    <branch id="Branch Data Sender Instance Tag (M) const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Data (S)" darg="sender_instance_tag"/>
        <flow sarg="const#2" sink="Concat authenticator (S)" darg="sender_instance_tag"/>
    </branch>

    <const id="Data Receiver Instance Tag (M)" confidentiality="false">
        <description>
            The instance tag of the intended recipient. Most likely 0 as
            the other party may not have identified their instance tag, yet.
        </description>
        <config uint32="0"/>
        <flow sarg="const" sink="Branch Data Receiver Instance Tag (M) const" darg="data"/>
    </const>

    <branch id="Branch Data Receiver Instance Tag (M) const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Data (S)" darg="receiver_instance_tag"/>
        <flow sarg="const#2" sink="Concat authenticator (S)" darg="receiver_instance_tag"/>
    </branch>

    <const id="Data Flags (M)" confidentiality="false">
        <description>
            The bitwise-OR of the flags for this message.
        </description>
        <config uint8="0"/>
        <flow sarg="const" sink="Branch Data Flags (M) const" darg="data"/>
    </const>

    <branch id="Branch Data Flags (M) const">
        <description>
            Branch output arguments
        </description>
        <flow sarg="const#1" sink="Data (S)" darg="flags"/>
        <flow sarg="const#2" sink="Concat authenticator (S)" darg="flags"/>
    </branch>

    <xform id="Data (S)" code="concat">
        <description>
            Encrypted data message sent to the network.
        </description>
        <flow sarg="result" sink="Network Mux" darg="data"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="flags"/>
        <arg name="sender_keyid"/>
        <arg name="recipient_keyid"/>
        <arg name="dh_y"/>
        <arg name="top_half_of_counter_init"/>
        <arg name="encrypted_message"/>
        <arg name="authenticator"/>
        <arg name="old_mac_keys"/>
    </xform>

    <!-- Receiving a data message from network -->

    <xform id="Concat recvkey (M)" code="concat">
        <description>
            Byte b, followed by secbytes.
        </description>
        <flow sarg="result" sink="Derive receiving enc key (M)" darg="data"/>
        <arg name="b"/>
        <arg name="secbytes"/>
    </xform>

    <hash id="Derive receiving enc key (M)">
        <description>
            The 160-bit output of the SHA-1 hash of the (5+len)
            bytes consisting of the byte b, followed by secbytes
        </description>
        <config algo="SHA"/>
        <flow sarg="hash" sink="Truncate receiving enc key (M)" darg="data"/>
    </hash>

    <xform id="Truncate receiving enc key (M)" code="prefix">
        <description>
            The first 16 bytes of h1(recvbyte)
        </description>
        <config length_in_bits="128"/>
        <flow sarg="data#1" sink="Derive receiving MAC key (M)" darg="data"/>
        <flow sarg="data#2" sink="Decrypt (M)" darg="key"/>
        <arg name="data"/>
    </xform>

    <hash id="Derive receiving MAC key (M)">
        <description>
            The 20-byte SHA-1 hash of the 16-byte sending AES key.
        </description>
        <config algo="SHA"/>
        <flow sarg="hash" sink="Branch Derive receiving MAC key (M) hash" darg="data"/>
    </hash>

    <branch id="Branch Derive receiving MAC key (M) hash">
        <description>
            Branch output arguments
        </description>
        <flow sarg="hash#1" sink="Verify MAC (M)" darg="key"/>
        <flow sarg="hash#2" sink="Reveal old MAC keys (M)" darg="key"/>
    </branch>

    <xform id="Data (R)" code="data_r">
        <description>
            Encrypted data message received from the network.
        </description>
        <flow sarg="protocol_version"           sink="Concat authenticator (R)" darg="protocol_version"/>
        <flow sarg="message_type"               sink="Concat authenticator (R)" darg="message_type"/>
        <flow sarg="sender_instance_tag"        sink="Concat authenticator (R)" darg="sender_instance_tag"/>
        <flow sarg="receiver_instance_tag"      sink="Concat authenticator (R)" darg="receiver_instance_tag"/>
        <flow sarg="flags"                      sink="Concat authenticator (R)" darg="flags"/>
        <flow sarg="sender_keyid#1"             sink="Select pubkey (M)"        darg="latest_remote_keyid"/>
        <flow sarg="sender_keyid#2"             sink="Concat authenticator (R)" darg="sender_keyid"/>
        <flow sarg="recipient_keyid#1"          sink="Select pubkey (M)"        darg="latest_local_keyid"/>
        <flow sarg="recipient_keyid#2"          sink="Concat authenticator (R)" darg="recipient_keyid"/>
        <flow sarg="dh_y#1"                     sink="Select pubkey (M)"        darg="pub_remote"/>
        <flow sarg="dh_y#2"                     sink="Concat authenticator (R)" darg="dh_y"/>
        <flow sarg="top_half_of_counter_init#2" sink="Concat authenticator (R)" darg="top_half_of_counter_init"/>
        <flow sarg="encrypted_message"          sink="Concat authenticator (R)" darg="encrypted_message"/>
        <flow sarg="authenticator"              sink="Verify MAC (M)"           darg="auth"/>
        <arg name="data"/>
    </xform>

    <xform id="Concat authenticator (R)" code="concat">
        <description>
            Input for the authenticator for checking received messages.
        </description>
        <flow sarg="result" sink="Verify MAC (M)" darg="msg"/>
        <arg name="protocol_version"/>
        <arg name="message_type"/>
        <arg name="sender_instance_tag"/>
        <arg name="receiver_instance_tag"/>
        <arg name="flags"/>
        <arg name="sender_keyid"/>
        <arg name="recipient_keyid"/>
        <arg name="dh_y"/>
        <arg name="top_half_of_counter_init"/>
        <arg name="encrypted_message"/>
    </xform>

    <verify_hmac_out id="Verify MAC (M)">
        <description>
             Use the "receiving MAC key" to verify the MAC on the message.
        </description>
        <flow sarg="msg" sink="Verify counter (M)" darg="data"/>
    </verify_hmac_out>

    <xform id="Verify counter (M)" code="verify_counter">
        <description>
            Check that the counter in the Data message is strictly larger
            than the last counter you saw using this pair of keys.
        </description>
        <flow sarg="data"              sink="Decrypt (M)" darg="ciphertext"/>
        <flow sarg="counter"           sink="Decrypt (M)" darg="ctr"/>
        <flow sarg="recipient_keyid#1" sink="Data (S)" darg="recipient_keyid"/>
        <flow sarg="recipient_keyid#2" sink="Concat authenticator (S)" darg="recipient_keyid"/>
        <arg name="data"/>
    </xform>

    <decrypt id="Decrypt (M)">
        <description>
            Decrypt the message using the receiving encryption key.
        </description>
        <config keylen="128"/>
        <flow sarg="plaintext" sink="User" darg="data"/>
    </decrypt>

</spg>
