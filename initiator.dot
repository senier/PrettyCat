digraph
{
    //graph [ranksep=0.8, nodesep=1.0];
    node [shape=rect];

    // title
    //labelloc="t";
    //label="OTR Initiator";

    /* Receiving a DH-Commit message */

    receive_dhcm [color=black, style=filled, fontcolor=white, label="receive(dhcm^{\emptysec})"];
    receive_dhcm -> dhcm;

    dhcm [label="(enc_gx^{\emptysec}, hashed_gx^{\emptysec})\leftarrow transform_{undhcm}(dhcm^{\emptysec})"]
    dhcm -> gxmpi;
    dhcm -> assertgxhash;

    /* Sending a DH-Key message */

    send_dhkm [color=black, style=filled, fontcolor=white, label="send(dhkm^{\emptysec})"];

    dhkm [label="dhkm^{\emptysec}\leftarrow transform_{dhkm}(proto_ver^{\emptysec}, msg_type^{\emptysec}, send_inst^{\emptysec}, recv_inst^{\emptysec}, gympi^{\emptysec})"];
    dhkm -> send_dhkm;

    pv [label="proto_ver^{\emptysec}"];
    pv -> dhkm;

    mt [label="msg_type^{\emptysec}"];
    mt -> dhkm;

    si [label="send_inst^{\emptysec}"];
    si -> dhkm;

    ri [label="recv_inst^{\emptysec}"];
    ri -> dhkm;

    gympi [label="gympi^{\emptysec}\leftarrow transform_{mpi}(gy^{\emptysec})"]
    gympi -> dhkm;
    gympi -> min;
    gympi -> hmac_input;

    gy [label="gy^{\emptysec}\leftarrow power(g^{\{i\}}, y^{\{c,i\}})"]
    gy -> gympi;

    g [label="g^{\{i\}}"];
    g -> gy;

    y [label="y^{\{c,i,f\}}\leftarrow rand(320^{\{i\}})"]
    y -> gy;
    y -> s;

    bits320 [label="320^{\{i\}}"];
    bits320 -> y;

    /* Receiving a Reveal Signature message */

    receive_rvsm [color=black, style=filled, fontcolor=white, label="receive(rvsm^{\emptysec})"];
    receive_rvsm -> rvsm;

    rvsm [label="(revealed_key^{\emptysec}, enc_sig^{\emptysec}, macd_sig^{\emptysec})\leftarrow transform_{unrvsm}(rvsm^{\emptysec})"];
    rvsm -> gxmpi;
    rvsm -> assert_mac;
    rvsm -> assert_mac;

    /* check MAC */
    assert_mac [label="enc_sig^{\{i\}}\leftarrow assert_mac(enc_sig^{\emptysec}, macd_sig^{\emptysec}, m2^{\{c,i\}})"];
    assert_mac -> decrypt_sig;

    /* signature check */
    decrypt_sig [label="(pub_{A}, keyid_{A}, sig_{A})\leftarrow decrypt(enc_sig^{\{i\}}, c^{\{c,i\}})"];
    decrypt_sig -> hmac_input;
    decrypt_sig -> hmac_input;
    decrypt_sig -> check_sig;

    /* hmac */
    hmac_input [label="hmac_input^{\emptysec}\leftarrow transform_{cat}(gympi^{\emptysec}, gxmpi^{\emptysec}, pub_{A}^{?}, keyid_{A})"];
    hmac_input -> ma;

    ma [label="M_{A}\leftarrow hmac(hmac_input^{\emptysec}, m1^{{ci}})"];
    ma -> check_sig;

    check_sig [label="sig_ok^{\{i\}}\leftarrow check_sig(pub_{A}, M_{A})"];
    check_sig -> sigm;

    /* Sending a signature message */
    send_sigm [color=black, style=filled, fontcolor=white, label="send(sigm^{\emptysec})"];

    sigm [label="sigm^{\emptysec}\leftarrow  transform_{sigm}(proto_ver^{\emptysec}, msg_type^{\emptysec}, send_inst^{\emptysec}, recv_inst^{\emptysec}, enc_sig^{\emptysec}, macd_sig^{\emptysec})"];
    sigm -> send_sigm;

    pv -> sigm;
    mt -> sigm;
    si -> sigm;
    ri -> sigm;

    /* FIXME: Encoding with data length! */
    encsig [label="enc_sig^{\emptysec}\leftarrow encrypt((0^{\{i\}}, c^{\{c,i,f\}})^{\{f\}}, X_{B}^{\{i\}})"];
    encsig -> sigm;
    encsig -> macdsig;

    sigm_iv [label="0^{\{i\}}"];
    sigm_iv -> encsig;

    sigm_keys [label="(c^{\{c,i,f\}}, m1^{\{c,i,f\}}, m2^{\{c,i,f\}})\leftarrow transform_{kdf}(s^{\{c,i,f\}})"];
    sigm_keys -> encsig;
    sigm_keys -> mb;
    sigm_keys -> decrypt_sig;
    sigm_keys -> assert_mac;
    sigm_keys -> ma;
    sigm_keys -> macdsig;

    macdsig [label="macd_sig^{\emptysec}\leftarrow hmac(enc_sig^{\{i\}}, m2^{\{c,i\}})"];
    macdsig -> sigm;

    iv [label="0^{\{i\}}"];
    iv -> gxmpi;

    gxmpi [label="gxmpi^{\{c\}}\leftarrow decrypt(0^{\{i\}}, revealed_key^{\emptysec}, enc_gx^{\emptysec})"];
    gxmpi -> min;
    gxmpi -> assertgxhash;
    gxmpi -> hmac_input;

    assertgxhash [label="gxmpi^{\emptysec}\leftarrow assert_hash(gxmpi^{\emptysec}, hashed_gx^{\emptysec})"];
    assertgxhash -> gx;

    gx [label="gx^{\emptysec}\leftarrow transform_{unmpi}(gxmpi^{\emptysec})"];
    gx -> s;

    s [label="s^{\{c,i\}}\leftarrow power(gx^{\emptysec}, y^{\{c,i\}})"];
    s -> sigm_keys;

    xb [label="X_{B}^{\{i\}}\leftarrow transform(pub_{B}^{\{i\}}, keyid_{B}^{\{i\}}, sig_{B}^{\{i\}})"]
    xb -> encsig;

    sigmpubb [label="pub_{B}^{\{i\}}"];
    sigmpubb -> xb;
    sigmpubb -> sigm_sig;
    sigmpubb -> min;

    sigmsecb [label="sec_{B}^{{c, i}}"];
    sigmsecb -> sigm_sig;

    sigmkeyid [label="keyid_{B}^{\{i\}}"];
    sigmkeyid -> xb;
    sigmkeyid -> min;

    mb [label="M_{B}^{\{i\}}\leftarrow hmac(m1^{\{c,i,f\}}, M_{in}^{\emptysec})"];
    mb -> sigm_sig;

    min [label="M_{in}^{\emptysec}\leftarrow transform(gxmpi^{\emptysec}, gympi^{\emptysec}, pub_{B}^{\{i\}}, keyid_{B}^{\{i\}})"];
    min -> mb;

    sigm_sig [label="sig_{B}^{\emptysec}\leftarrow sign(pub_{B}^{\{i\}}, sec_{B}^{\{c,i\}}, M_{B}^{\{i\}}"];
    sigm_sig-> xb;
}
